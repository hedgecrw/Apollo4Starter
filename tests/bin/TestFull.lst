
bin/TestFull.axf:     file format elf32-littlearm


Disassembly of section .text:

00018200 <__aeabi_d2f>:
   18200:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18204:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18208:	bf24      	itt	cs
   1820a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1820e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18212:	d90d      	bls.n	18230 <__aeabi_d2f+0x30>
   18214:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18218:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1821c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18220:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18224:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18228:	bf08      	it	eq
   1822a:	f020 0001 	biceq.w	r0, r0, #1
   1822e:	4770      	bx	lr
   18230:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18234:	d121      	bne.n	1827a <__aeabi_d2f+0x7a>
   18236:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1823a:	bfbc      	itt	lt
   1823c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18240:	4770      	bxlt	lr
   18242:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18246:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1824a:	f1c2 0218 	rsb	r2, r2, #24
   1824e:	f1c2 0c20 	rsb	ip, r2, #32
   18252:	fa10 f30c 	lsls.w	r3, r0, ip
   18256:	fa20 f002 	lsr.w	r0, r0, r2
   1825a:	bf18      	it	ne
   1825c:	f040 0001 	orrne.w	r0, r0, #1
   18260:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18264:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18268:	fa03 fc0c 	lsl.w	ip, r3, ip
   1826c:	ea40 000c 	orr.w	r0, r0, ip
   18270:	fa23 f302 	lsr.w	r3, r3, r2
   18274:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18278:	e7cc      	b.n	18214 <__aeabi_d2f+0x14>
   1827a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1827e:	d107      	bne.n	18290 <__aeabi_d2f+0x90>
   18280:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18284:	bf1e      	ittt	ne
   18286:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1828a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1828e:	4770      	bxne	lr
   18290:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18294:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18298:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1829c:	4770      	bx	lr
   1829e:	bf00      	nop

000182a0 <am_util_stdio_printf_init>:
// Sets the interface for printf calls.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   182a0:	b480      	push	{r7}
   182a2:	b083      	sub	sp, #12
   182a4:	af00      	add	r7, sp, #0
   182a6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   182a8:	4a04      	ldr	r2, [pc, #16]	; (182bc <am_util_stdio_printf_init+0x1c>)
   182aa:	687b      	ldr	r3, [r7, #4]
   182ac:	6013      	str	r3, [r2, #0]
}
   182ae:	bf00      	nop
   182b0:	370c      	adds	r7, #12
   182b2:	46bd      	mov	sp, r7
   182b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   182b8:	4770      	bx	lr
   182ba:	bf00      	nop
   182bc:	1000001c 	.word	0x1000001c

000182c0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   182c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
   182c4:	b09b      	sub	sp, #108	; 0x6c
   182c6:	af00      	add	r7, sp, #0
   182c8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   182cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   182d0:	f04f 0000 	mov.w	r0, #0
   182d4:	f04f 0100 	mov.w	r1, #0
   182d8:	0018      	movs	r0, r3
   182da:	2100      	movs	r1, #0
   182dc:	ea50 0301 	orrs.w	r3, r0, r1
   182e0:	f000 80b6 	beq.w	18450 <divu64_10+0x190>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   182e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   182e8:	f04f 0400 	mov.w	r4, #0
   182ec:	f04f 0500 	mov.w	r5, #0
   182f0:	0854      	lsrs	r4, r2, #1
   182f2:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
   182f6:	085d      	lsrs	r5, r3, #1
   182f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   182fc:	f04f 0000 	mov.w	r0, #0
   18300:	f04f 0100 	mov.w	r1, #0
   18304:	0890      	lsrs	r0, r2, #2
   18306:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
   1830a:	0899      	lsrs	r1, r3, #2
   1830c:	eb14 0a00 	adds.w	sl, r4, r0
   18310:	eb45 0b01 	adc.w	fp, r5, r1
   18314:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   18318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1831c:	f04f 0000 	mov.w	r0, #0
   18320:	f04f 0100 	mov.w	r1, #0
   18324:	0910      	lsrs	r0, r2, #4
   18326:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
   1832a:	0919      	lsrs	r1, r3, #4
   1832c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18330:	1814      	adds	r4, r2, r0
   18332:	62bc      	str	r4, [r7, #40]	; 0x28
   18334:	414b      	adcs	r3, r1
   18336:	62fb      	str	r3, [r7, #44]	; 0x2c
   18338:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   1833c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   18340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18344:	f04f 0000 	mov.w	r0, #0
   18348:	f04f 0100 	mov.w	r1, #0
   1834c:	0a10      	lsrs	r0, r2, #8
   1834e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   18352:	0a19      	lsrs	r1, r3, #8
   18354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18358:	1814      	adds	r4, r2, r0
   1835a:	623c      	str	r4, [r7, #32]
   1835c:	414b      	adcs	r3, r1
   1835e:	627b      	str	r3, [r7, #36]	; 0x24
   18360:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   18364:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   18368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1836c:	f04f 0000 	mov.w	r0, #0
   18370:	f04f 0100 	mov.w	r1, #0
   18374:	0c10      	lsrs	r0, r2, #16
   18376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1837a:	0c19      	lsrs	r1, r3, #16
   1837c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18380:	1814      	adds	r4, r2, r0
   18382:	61bc      	str	r4, [r7, #24]
   18384:	414b      	adcs	r3, r1
   18386:	61fb      	str	r3, [r7, #28]
   18388:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1838c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   18390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18394:	f04f 0000 	mov.w	r0, #0
   18398:	f04f 0100 	mov.w	r1, #0
   1839c:	0018      	movs	r0, r3
   1839e:	2100      	movs	r1, #0
   183a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   183a4:	1814      	adds	r4, r2, r0
   183a6:	613c      	str	r4, [r7, #16]
   183a8:	414b      	adcs	r3, r1
   183aa:	617b      	str	r3, [r7, #20]
   183ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   183b0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   183b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   183b8:	f04f 0200 	mov.w	r2, #0
   183bc:	f04f 0300 	mov.w	r3, #0
   183c0:	08c2      	lsrs	r2, r0, #3
   183c2:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   183c6:	08cb      	lsrs	r3, r1, #3
   183c8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   183cc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
   183d0:	4622      	mov	r2, r4
   183d2:	462b      	mov	r3, r5
   183d4:	f04f 0000 	mov.w	r0, #0
   183d8:	f04f 0100 	mov.w	r1, #0
   183dc:	0099      	lsls	r1, r3, #2
   183de:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
   183e2:	0090      	lsls	r0, r2, #2
   183e4:	4602      	mov	r2, r0
   183e6:	460b      	mov	r3, r1
   183e8:	eb12 0804 	adds.w	r8, r2, r4
   183ec:	eb43 0905 	adc.w	r9, r3, r5
   183f0:	eb18 0308 	adds.w	r3, r8, r8
   183f4:	60bb      	str	r3, [r7, #8]
   183f6:	eb49 0309 	adc.w	r3, r9, r9
   183fa:	60fb      	str	r3, [r7, #12]
   183fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
   18400:	4640      	mov	r0, r8
   18402:	4649      	mov	r1, r9
   18404:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   18408:	1a14      	subs	r4, r2, r0
   1840a:	603c      	str	r4, [r7, #0]
   1840c:	eb63 0301 	sbc.w	r3, r3, r1
   18410:	607b      	str	r3, [r7, #4]
   18412:	e9d7 3400 	ldrd	r3, r4, [r7]
   18416:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   1841a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1841e:	1d91      	adds	r1, r2, #6
   18420:	6339      	str	r1, [r7, #48]	; 0x30
   18422:	f143 0300 	adc.w	r3, r3, #0
   18426:	637b      	str	r3, [r7, #52]	; 0x34
   18428:	f04f 0200 	mov.w	r2, #0
   1842c:	f04f 0300 	mov.w	r3, #0
   18430:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   18434:	4621      	mov	r1, r4
   18436:	090a      	lsrs	r2, r1, #4
   18438:	4629      	mov	r1, r5
   1843a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   1843e:	4629      	mov	r1, r5
   18440:	090b      	lsrs	r3, r1, #4
   18442:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18446:	1814      	adds	r4, r2, r0
   18448:	63bc      	str	r4, [r7, #56]	; 0x38
   1844a:	414b      	adcs	r3, r1
   1844c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1844e:	e02a      	b.n	184a6 <divu64_10+0x1e6>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   18450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18452:	667b      	str	r3, [r7, #100]	; 0x64
        q32 = (ui32Val>>1) + (ui32Val>>2);
   18454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   18456:	085a      	lsrs	r2, r3, #1
   18458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1845a:	089b      	lsrs	r3, r3, #2
   1845c:	4413      	add	r3, r2
   1845e:	663b      	str	r3, [r7, #96]	; 0x60
        q32 += (q32 >> 4);
   18460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18462:	091b      	lsrs	r3, r3, #4
   18464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   18466:	4413      	add	r3, r2
   18468:	663b      	str	r3, [r7, #96]	; 0x60
        q32 += (q32 >> 8);
   1846a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1846c:	0a1b      	lsrs	r3, r3, #8
   1846e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   18470:	4413      	add	r3, r2
   18472:	663b      	str	r3, [r7, #96]	; 0x60
        q32 += (q32 >> 16);
   18474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18476:	0c1b      	lsrs	r3, r3, #16
   18478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1847a:	4413      	add	r3, r2
   1847c:	663b      	str	r3, [r7, #96]	; 0x60
        q32 >>= 3;
   1847e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   18480:	08db      	lsrs	r3, r3, #3
   18482:	663b      	str	r3, [r7, #96]	; 0x60
        r32 = ui32Val - q32*10;
   18484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   18486:	4613      	mov	r3, r2
   18488:	009b      	lsls	r3, r3, #2
   1848a:	4413      	add	r3, r2
   1848c:	005b      	lsls	r3, r3, #1
   1848e:	461a      	mov	r2, r3
   18490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   18492:	1a9b      	subs	r3, r3, r2
   18494:	65fb      	str	r3, [r7, #92]	; 0x5c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   18496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18498:	3306      	adds	r3, #6
   1849a:	091a      	lsrs	r2, r3, #4
   1849c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1849e:	4413      	add	r3, r2
   184a0:	2200      	movs	r2, #0
   184a2:	63bb      	str	r3, [r7, #56]	; 0x38
   184a4:	63fa      	str	r2, [r7, #60]	; 0x3c
    }
}
   184a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   184aa:	4610      	mov	r0, r2
   184ac:	4619      	mov	r1, r3
   184ae:	376c      	adds	r7, #108	; 0x6c
   184b0:	46bd      	mov	sp, r7
   184b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
   184b6:	4770      	bx	lr

000184b8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   184b8:	b580      	push	{r7, lr}
   184ba:	b084      	sub	sp, #16
   184bc:	af00      	add	r7, sp, #0
   184be:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   184c2:	683a      	ldr	r2, [r7, #0]
   184c4:	687b      	ldr	r3, [r7, #4]
   184c6:	4313      	orrs	r3, r2
   184c8:	2b00      	cmp	r3, #0
   184ca:	bf0c      	ite	eq
   184cc:	2301      	moveq	r3, #1
   184ce:	2300      	movne	r3, #0
   184d0:	b2db      	uxtb	r3, r3
   184d2:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   184d4:	e008      	b.n	184e8 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   184d6:	e9d7 0100 	ldrd	r0, r1, [r7]
   184da:	f7ff fef1 	bl	182c0 <divu64_10>
   184de:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   184e2:	68fb      	ldr	r3, [r7, #12]
   184e4:	3301      	adds	r3, #1
   184e6:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   184e8:	e9d7 2300 	ldrd	r2, r3, [r7]
   184ec:	4313      	orrs	r3, r2
   184ee:	d1f2      	bne.n	184d6 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   184f0:	68fb      	ldr	r3, [r7, #12]
}
   184f2:	4618      	mov	r0, r3
   184f4:	3710      	adds	r7, #16
   184f6:	46bd      	mov	sp, r7
   184f8:	bd80      	pop	{r7, pc}

000184fa <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   184fa:	b5b0      	push	{r4, r5, r7, lr}
   184fc:	b082      	sub	sp, #8
   184fe:	af00      	add	r7, sp, #0
   18500:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   18504:	e9d7 2300 	ldrd	r2, r3, [r7]
   18508:	2b00      	cmp	r3, #0
   1850a:	da07      	bge.n	1851c <ndigits_in_i64+0x22>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   1850c:	e9d7 2300 	ldrd	r2, r3, [r7]
   18510:	2100      	movs	r1, #0
   18512:	4254      	negs	r4, r2
   18514:	eb61 0503 	sbc.w	r5, r1, r3
   18518:	e9c7 4500 	strd	r4, r5, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   1851c:	e9d7 2300 	ldrd	r2, r3, [r7]
   18520:	4610      	mov	r0, r2
   18522:	4619      	mov	r1, r3
   18524:	f7ff ffc8 	bl	184b8 <ndigits_in_u64>
   18528:	4603      	mov	r3, r0
}
   1852a:	4618      	mov	r0, r3
   1852c:	3708      	adds	r7, #8
   1852e:	46bd      	mov	sp, r7
   18530:	bdb0      	pop	{r4, r5, r7, pc}

00018532 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   18532:	b480      	push	{r7}
   18534:	b085      	sub	sp, #20
   18536:	af00      	add	r7, sp, #0
   18538:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   1853c:	683a      	ldr	r2, [r7, #0]
   1853e:	687b      	ldr	r3, [r7, #4]
   18540:	4313      	orrs	r3, r2
   18542:	2b00      	cmp	r3, #0
   18544:	bf0c      	ite	eq
   18546:	2301      	moveq	r3, #1
   18548:	2300      	movne	r3, #0
   1854a:	b2db      	uxtb	r3, r3
   1854c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   1854e:	e00e      	b.n	1856e <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
   18550:	e9d7 0100 	ldrd	r0, r1, [r7]
   18554:	f04f 0200 	mov.w	r2, #0
   18558:	f04f 0300 	mov.w	r3, #0
   1855c:	0902      	lsrs	r2, r0, #4
   1855e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   18562:	090b      	lsrs	r3, r1, #4
   18564:	e9c7 2300 	strd	r2, r3, [r7]
        ++iDigits;
   18568:	68fb      	ldr	r3, [r7, #12]
   1856a:	3301      	adds	r3, #1
   1856c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   1856e:	e9d7 2300 	ldrd	r2, r3, [r7]
   18572:	4313      	orrs	r3, r2
   18574:	d1ec      	bne.n	18550 <ndigits_in_hex+0x1e>
    }

    return iDigits;
   18576:	68fb      	ldr	r3, [r7, #12]
}
   18578:	4618      	mov	r0, r3
   1857a:	3714      	adds	r7, #20
   1857c:	46bd      	mov	sp, r7
   1857e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18582:	4770      	bx	lr

00018584 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   18584:	b480      	push	{r7}
   18586:	b087      	sub	sp, #28
   18588:	af00      	add	r7, sp, #0
   1858a:	6078      	str	r0, [r7, #4]
   1858c:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   1858e:	2300      	movs	r3, #0
   18590:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   18592:	2300      	movs	r3, #0
   18594:	613b      	str	r3, [r7, #16]
   18596:	2300      	movs	r3, #0
   18598:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   1859a:	687b      	ldr	r3, [r7, #4]
   1859c:	781b      	ldrb	r3, [r3, #0]
   1859e:	2b2d      	cmp	r3, #45	; 0x2d
   185a0:	d11b      	bne.n	185da <decstr_to_int+0x56>
    {
        bNeg = true;
   185a2:	2301      	movs	r3, #1
   185a4:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   185a6:	687b      	ldr	r3, [r7, #4]
   185a8:	3301      	adds	r3, #1
   185aa:	607b      	str	r3, [r7, #4]
        uCnt++;
   185ac:	68fb      	ldr	r3, [r7, #12]
   185ae:	3301      	adds	r3, #1
   185b0:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   185b2:	e012      	b.n	185da <decstr_to_int+0x56>
    {
        ++uCnt;
   185b4:	68fb      	ldr	r3, [r7, #12]
   185b6:	3301      	adds	r3, #1
   185b8:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   185ba:	693a      	ldr	r2, [r7, #16]
   185bc:	4613      	mov	r3, r2
   185be:	009b      	lsls	r3, r3, #2
   185c0:	4413      	add	r3, r2
   185c2:	005b      	lsls	r3, r3, #1
   185c4:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   185c6:	687b      	ldr	r3, [r7, #4]
   185c8:	781b      	ldrb	r3, [r3, #0]
   185ca:	461a      	mov	r2, r3
   185cc:	693b      	ldr	r3, [r7, #16]
   185ce:	4413      	add	r3, r2
   185d0:	3b30      	subs	r3, #48	; 0x30
   185d2:	613b      	str	r3, [r7, #16]
        pcStr++;
   185d4:	687b      	ldr	r3, [r7, #4]
   185d6:	3301      	adds	r3, #1
   185d8:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   185da:	687b      	ldr	r3, [r7, #4]
   185dc:	781b      	ldrb	r3, [r3, #0]
   185de:	2b2f      	cmp	r3, #47	; 0x2f
   185e0:	d903      	bls.n	185ea <decstr_to_int+0x66>
   185e2:	687b      	ldr	r3, [r7, #4]
   185e4:	781b      	ldrb	r3, [r3, #0]
   185e6:	2b39      	cmp	r3, #57	; 0x39
   185e8:	d9e4      	bls.n	185b4 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   185ea:	683b      	ldr	r3, [r7, #0]
   185ec:	2b00      	cmp	r3, #0
   185ee:	d002      	beq.n	185f6 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   185f0:	683b      	ldr	r3, [r7, #0]
   185f2:	68fa      	ldr	r2, [r7, #12]
   185f4:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   185f6:	7dfb      	ldrb	r3, [r7, #23]
   185f8:	2b00      	cmp	r3, #0
   185fa:	d002      	beq.n	18602 <decstr_to_int+0x7e>
   185fc:	693b      	ldr	r3, [r7, #16]
   185fe:	425b      	negs	r3, r3
   18600:	e000      	b.n	18604 <decstr_to_int+0x80>
   18602:	693b      	ldr	r3, [r7, #16]
}
   18604:	4618      	mov	r0, r3
   18606:	371c      	adds	r7, #28
   18608:	46bd      	mov	sp, r7
   1860a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1860e:	4770      	bx	lr

00018610 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   18610:	b580      	push	{r7, lr}
   18612:	b090      	sub	sp, #64	; 0x40
   18614:	af00      	add	r7, sp, #0
   18616:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1861a:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1861c:	2300      	movs	r3, #0
   1861e:	63fb      	str	r3, [r7, #60]	; 0x3c
   18620:	2300      	movs	r3, #0
   18622:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   18624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   18628:	f7ff fe4a 	bl	182c0 <divu64_10>
   1862c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   18630:	68b9      	ldr	r1, [r7, #8]
   18632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18634:	4613      	mov	r3, r2
   18636:	009b      	lsls	r3, r3, #2
   18638:	4413      	add	r3, r2
   1863a:	005b      	lsls	r3, r3, #1
   1863c:	1acb      	subs	r3, r1, r3
   1863e:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   18640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18642:	b2da      	uxtb	r2, r3
   18644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18646:	1c59      	adds	r1, r3, #1
   18648:	63f9      	str	r1, [r7, #60]	; 0x3c
   1864a:	3230      	adds	r2, #48	; 0x30
   1864c:	b2d2      	uxtb	r2, r2
   1864e:	3340      	adds	r3, #64	; 0x40
   18650:	443b      	add	r3, r7
   18652:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   18656:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1865a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    } while ( ui64Val );
   1865e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   18662:	4313      	orrs	r3, r2
   18664:	d1de      	bne.n	18624 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   18666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18668:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1866a:	687b      	ldr	r3, [r7, #4]
   1866c:	2b00      	cmp	r3, #0
   1866e:	d011      	beq.n	18694 <uint64_to_str+0x84>
    {
        while ( ix-- )
   18670:	e008      	b.n	18684 <uint64_to_str+0x74>
        {
            *pcBuf++ = tbuf[ix];
   18672:	687b      	ldr	r3, [r7, #4]
   18674:	1c5a      	adds	r2, r3, #1
   18676:	607a      	str	r2, [r7, #4]
   18678:	f107 0110 	add.w	r1, r7, #16
   1867c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1867e:	440a      	add	r2, r1
   18680:	7812      	ldrb	r2, [r2, #0]
   18682:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   18684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18686:	1e5a      	subs	r2, r3, #1
   18688:	63fa      	str	r2, [r7, #60]	; 0x3c
   1868a:	2b00      	cmp	r3, #0
   1868c:	d1f1      	bne.n	18672 <uint64_to_str+0x62>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1868e:	687b      	ldr	r3, [r7, #4]
   18690:	2200      	movs	r2, #0
   18692:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   18694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   18696:	4618      	mov	r0, r3
   18698:	3740      	adds	r7, #64	; 0x40
   1869a:	46bd      	mov	sp, r7
   1869c:	bd80      	pop	{r7, pc}

0001869e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   1869e:	b480      	push	{r7}
   186a0:	b08d      	sub	sp, #52	; 0x34
   186a2:	af00      	add	r7, sp, #0
   186a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
   186a8:	607a      	str	r2, [r7, #4]
   186aa:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   186ac:	2300      	movs	r3, #0
   186ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   186b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   186b4:	4313      	orrs	r3, r2
   186b6:	d133      	bne.n	18720 <uint64_to_hexstr+0x82>
    {
        tbuf[ix++] = '0';   // Print a '0'
   186b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186ba:	1c5a      	adds	r2, r3, #1
   186bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   186be:	3330      	adds	r3, #48	; 0x30
   186c0:	443b      	add	r3, r7
   186c2:	2230      	movs	r2, #48	; 0x30
   186c4:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   186c8:	e02a      	b.n	18720 <uint64_to_hexstr+0x82>
    {
        cCh = ui64Val & 0xf;
   186ca:	7a3b      	ldrb	r3, [r7, #8]
   186cc:	f003 030f 	and.w	r3, r3, #15
   186d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   186d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   186d8:	2b09      	cmp	r3, #9
   186da:	d90a      	bls.n	186f2 <uint64_to_hexstr+0x54>
        {
            cCh += bLower ? 0x27 : 0x7;
   186dc:	78fb      	ldrb	r3, [r7, #3]
   186de:	2b00      	cmp	r3, #0
   186e0:	d001      	beq.n	186e6 <uint64_to_hexstr+0x48>
   186e2:	2227      	movs	r2, #39	; 0x27
   186e4:	e000      	b.n	186e8 <uint64_to_hexstr+0x4a>
   186e6:	2207      	movs	r2, #7
   186e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   186ec:	4413      	add	r3, r2
   186ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   186f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186f4:	1c5a      	adds	r2, r3, #1
   186f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   186f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   186fc:	3230      	adds	r2, #48	; 0x30
   186fe:	b2d2      	uxtb	r2, r2
   18700:	3330      	adds	r3, #48	; 0x30
   18702:	443b      	add	r3, r7
   18704:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   18708:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1870c:	f04f 0200 	mov.w	r2, #0
   18710:	f04f 0300 	mov.w	r3, #0
   18714:	0902      	lsrs	r2, r0, #4
   18716:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   1871a:	090b      	lsrs	r3, r1, #4
   1871c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while ( ui64Val )
   18720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   18724:	4313      	orrs	r3, r2
   18726:	d1d0      	bne.n	186ca <uint64_to_hexstr+0x2c>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   18728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1872a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   1872c:	687b      	ldr	r3, [r7, #4]
   1872e:	2b00      	cmp	r3, #0
   18730:	d011      	beq.n	18756 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
   18732:	e008      	b.n	18746 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
   18734:	687b      	ldr	r3, [r7, #4]
   18736:	1c5a      	adds	r2, r3, #1
   18738:	607a      	str	r2, [r7, #4]
   1873a:	f107 0110 	add.w	r1, r7, #16
   1873e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18740:	440a      	add	r2, r1
   18742:	7812      	ldrb	r2, [r2, #0]
   18744:	701a      	strb	r2, [r3, #0]
        while (ix--)
   18746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18748:	1e5a      	subs	r2, r3, #1
   1874a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1874c:	2b00      	cmp	r3, #0
   1874e:	d1f1      	bne.n	18734 <uint64_to_hexstr+0x96>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   18750:	687b      	ldr	r3, [r7, #4]
   18752:	2200      	movs	r2, #0
   18754:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   18756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   18758:	4618      	mov	r0, r3
   1875a:	3734      	adds	r7, #52	; 0x34
   1875c:	46bd      	mov	sp, r7
   1875e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18762:	4770      	bx	lr

00018764 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   18764:	b480      	push	{r7}
   18766:	b085      	sub	sp, #20
   18768:	af00      	add	r7, sp, #0
   1876a:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   1876c:	2300      	movs	r3, #0
   1876e:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   18770:	687b      	ldr	r3, [r7, #4]
   18772:	2b00      	cmp	r3, #0
   18774:	d104      	bne.n	18780 <simple_strlen+0x1c>
    {
        return ui32RetVal;
   18776:	68fb      	ldr	r3, [r7, #12]
   18778:	e009      	b.n	1878e <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   1877a:	68fb      	ldr	r3, [r7, #12]
   1877c:	3301      	adds	r3, #1
   1877e:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   18780:	687b      	ldr	r3, [r7, #4]
   18782:	1c5a      	adds	r2, r3, #1
   18784:	607a      	str	r2, [r7, #4]
   18786:	781b      	ldrb	r3, [r3, #0]
   18788:	2b00      	cmp	r3, #0
   1878a:	d1f6      	bne.n	1877a <simple_strlen+0x16>
    }
    return ui32RetVal;
   1878c:	68fb      	ldr	r3, [r7, #12]
}
   1878e:	4618      	mov	r0, r3
   18790:	3714      	adds	r7, #20
   18792:	46bd      	mov	sp, r7
   18794:	f85d 7b04 	ldr.w	r7, [sp], #4
   18798:	4770      	bx	lr

0001879a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   1879a:	b480      	push	{r7}
   1879c:	b087      	sub	sp, #28
   1879e:	af00      	add	r7, sp, #0
   187a0:	60f8      	str	r0, [r7, #12]
   187a2:	460b      	mov	r3, r1
   187a4:	607a      	str	r2, [r7, #4]
   187a6:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   187a8:	2300      	movs	r3, #0
   187aa:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   187ac:	687b      	ldr	r3, [r7, #4]
   187ae:	2b00      	cmp	r3, #0
   187b0:	dc0c      	bgt.n	187cc <padbuffer+0x32>
    {
        return i32Cnt;
   187b2:	697b      	ldr	r3, [r7, #20]
   187b4:	e010      	b.n	187d8 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   187b6:	68fb      	ldr	r3, [r7, #12]
   187b8:	2b00      	cmp	r3, #0
   187ba:	d004      	beq.n	187c6 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   187bc:	68fb      	ldr	r3, [r7, #12]
   187be:	1c5a      	adds	r2, r3, #1
   187c0:	60fa      	str	r2, [r7, #12]
   187c2:	7afa      	ldrb	r2, [r7, #11]
   187c4:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   187c6:	697b      	ldr	r3, [r7, #20]
   187c8:	3301      	adds	r3, #1
   187ca:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   187cc:	687b      	ldr	r3, [r7, #4]
   187ce:	1e5a      	subs	r2, r3, #1
   187d0:	607a      	str	r2, [r7, #4]
   187d2:	2b00      	cmp	r3, #0
   187d4:	d1ef      	bne.n	187b6 <padbuffer+0x1c>
    }

    return i32Cnt;
   187d6:	697b      	ldr	r3, [r7, #20]
}
   187d8:	4618      	mov	r0, r3
   187da:	371c      	adds	r7, #28
   187dc:	46bd      	mov	sp, r7
   187de:	f85d 7b04 	ldr.w	r7, [sp], #4
   187e2:	4770      	bx	lr

000187e4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   187e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   187e8:	b08e      	sub	sp, #56	; 0x38
   187ea:	af00      	add	r7, sp, #0
   187ec:	ed87 0a03 	vstr	s0, [r7, #12]
   187f0:	60b8      	str	r0, [r7, #8]
   187f2:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   187f4:	68bb      	ldr	r3, [r7, #8]
   187f6:	681b      	ldr	r3, [r3, #0]
   187f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   187fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187fc:	2b03      	cmp	r3, #3
   187fe:	dc02      	bgt.n	18806 <ftoa+0x22>
    {
        return AM_FTOA_ERR_BUFSIZE;
   18800:	f06f 0302 	mvn.w	r3, #2
   18804:	e0e9      	b.n	189da <ftoa+0x1f6>
    }

    if (fValue == 0.0f)
   18806:	edd7 7a03 	vldr	s15, [r7, #12]
   1880a:	eef5 7a40 	vcmp.f32	s15, #0.0
   1880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18812:	d104      	bne.n	1881e <ftoa+0x3a>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   18814:	68bb      	ldr	r3, [r7, #8]
   18816:	4a73      	ldr	r2, [pc, #460]	; (189e4 <ftoa+0x200>)
   18818:	601a      	str	r2, [r3, #0]
        return 3;
   1881a:	2303      	movs	r3, #3
   1881c:	e0dd      	b.n	189da <ftoa+0x1f6>
    }

    pcBufInitial = pcBuf;
   1881e:	68bb      	ldr	r3, [r7, #8]
   18820:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   18822:	68fb      	ldr	r3, [r7, #12]
   18824:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   18826:	693b      	ldr	r3, [r7, #16]
   18828:	15db      	asrs	r3, r3, #23
   1882a:	b2db      	uxtb	r3, r3
   1882c:	3b7f      	subs	r3, #127	; 0x7f
   1882e:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   18830:	693b      	ldr	r3, [r7, #16]
   18832:	f3c3 0316 	ubfx	r3, r3, #0, #23
   18836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1883a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   1883c:	2300      	movs	r3, #0
   1883e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   18840:	2300      	movs	r3, #0
   18842:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   18844:	69fb      	ldr	r3, [r7, #28]
   18846:	2b1e      	cmp	r3, #30
   18848:	dd02      	ble.n	18850 <ftoa+0x6c>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   1884a:	f06f 0301 	mvn.w	r3, #1
   1884e:	e0c4      	b.n	189da <ftoa+0x1f6>
    }
    else if (iExp2 < -23)
   18850:	69fb      	ldr	r3, [r7, #28]
   18852:	f113 0f17 	cmn.w	r3, #23
   18856:	da02      	bge.n	1885e <ftoa+0x7a>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   18858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1885c:	e0bd      	b.n	189da <ftoa+0x1f6>
    }
    else if (iExp2 >= 23)
   1885e:	69fb      	ldr	r3, [r7, #28]
   18860:	2b16      	cmp	r3, #22
   18862:	dd06      	ble.n	18872 <ftoa+0x8e>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   18864:	69fb      	ldr	r3, [r7, #28]
   18866:	3b17      	subs	r3, #23
   18868:	69ba      	ldr	r2, [r7, #24]
   1886a:	fa02 f303 	lsl.w	r3, r2, r3
   1886e:	637b      	str	r3, [r7, #52]	; 0x34
   18870:	e01a      	b.n	188a8 <ftoa+0xc4>
    }
    else if (iExp2 >= 0)
   18872:	69fb      	ldr	r3, [r7, #28]
   18874:	2b00      	cmp	r3, #0
   18876:	db0f      	blt.n	18898 <ftoa+0xb4>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   18878:	69fb      	ldr	r3, [r7, #28]
   1887a:	f1c3 0317 	rsb	r3, r3, #23
   1887e:	69ba      	ldr	r2, [r7, #24]
   18880:	fa42 f303 	asr.w	r3, r2, r3
   18884:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   18886:	69fb      	ldr	r3, [r7, #28]
   18888:	3301      	adds	r3, #1
   1888a:	69ba      	ldr	r2, [r7, #24]
   1888c:	fa02 f303 	lsl.w	r3, r2, r3
   18890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18894:	633b      	str	r3, [r7, #48]	; 0x30
   18896:	e007      	b.n	188a8 <ftoa+0xc4>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   18898:	69bb      	ldr	r3, [r7, #24]
   1889a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1889e:	69fb      	ldr	r3, [r7, #28]
   188a0:	43db      	mvns	r3, r3
   188a2:	fa42 f303 	asr.w	r3, r2, r3
   188a6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   188a8:	693b      	ldr	r3, [r7, #16]
   188aa:	2b00      	cmp	r3, #0
   188ac:	da04      	bge.n	188b8 <ftoa+0xd4>
    {
        *pcBuf++ = '-';
   188ae:	68bb      	ldr	r3, [r7, #8]
   188b0:	1c5a      	adds	r2, r3, #1
   188b2:	60ba      	str	r2, [r7, #8]
   188b4:	222d      	movs	r2, #45	; 0x2d
   188b6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   188b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   188ba:	2b00      	cmp	r3, #0
   188bc:	d105      	bne.n	188ca <ftoa+0xe6>
    {
        *pcBuf++ = '0';
   188be:	68bb      	ldr	r3, [r7, #8]
   188c0:	1c5a      	adds	r2, r3, #1
   188c2:	60ba      	str	r2, [r7, #8]
   188c4:	2230      	movs	r2, #48	; 0x30
   188c6:	701a      	strb	r2, [r3, #0]
   188c8:	e023      	b.n	18912 <ftoa+0x12e>
    }
    else
    {
        if (i32IntPart > 0)
   188ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   188cc:	2b00      	cmp	r3, #0
   188ce:	dd09      	ble.n	188e4 <ftoa+0x100>
        {
            uint64_to_str(i32IntPart, pcBuf);
   188d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   188d2:	17da      	asrs	r2, r3, #31
   188d4:	4698      	mov	r8, r3
   188d6:	4691      	mov	r9, r2
   188d8:	68ba      	ldr	r2, [r7, #8]
   188da:	4640      	mov	r0, r8
   188dc:	4649      	mov	r1, r9
   188de:	f7ff fe97 	bl	18610 <uint64_to_str>
   188e2:	e012      	b.n	1890a <ftoa+0x126>
        }
        else
        {
            *pcBuf++ = '-';
   188e4:	68bb      	ldr	r3, [r7, #8]
   188e6:	1c5a      	adds	r2, r3, #1
   188e8:	60ba      	str	r2, [r7, #8]
   188ea:	222d      	movs	r2, #45	; 0x2d
   188ec:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   188ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   188f0:	425b      	negs	r3, r3
   188f2:	17da      	asrs	r2, r3, #31
   188f4:	461c      	mov	r4, r3
   188f6:	4615      	mov	r5, r2
   188f8:	68ba      	ldr	r2, [r7, #8]
   188fa:	4620      	mov	r0, r4
   188fc:	4629      	mov	r1, r5
   188fe:	f7ff fe87 	bl	18610 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   18902:	e002      	b.n	1890a <ftoa+0x126>
        {
            pcBuf++;
   18904:	68bb      	ldr	r3, [r7, #8]
   18906:	3301      	adds	r3, #1
   18908:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   1890a:	68bb      	ldr	r3, [r7, #8]
   1890c:	781b      	ldrb	r3, [r3, #0]
   1890e:	2b00      	cmp	r3, #0
   18910:	d1f8      	bne.n	18904 <ftoa+0x120>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   18912:	68bb      	ldr	r3, [r7, #8]
   18914:	1c5a      	adds	r2, r3, #1
   18916:	60ba      	str	r2, [r7, #8]
   18918:	222e      	movs	r2, #46	; 0x2e
   1891a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   1891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1891e:	2b00      	cmp	r3, #0
   18920:	d105      	bne.n	1892e <ftoa+0x14a>
    {
        *pcBuf++ = '0';
   18922:	68bb      	ldr	r3, [r7, #8]
   18924:	1c5a      	adds	r2, r3, #1
   18926:	60ba      	str	r2, [r7, #8]
   18928:	2230      	movs	r2, #48	; 0x30
   1892a:	701a      	strb	r2, [r3, #0]
   1892c:	e04f      	b.n	189ce <ftoa+0x1ea>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1892e:	68ba      	ldr	r2, [r7, #8]
   18930:	6a3b      	ldr	r3, [r7, #32]
   18932:	1ad3      	subs	r3, r2, r3
   18934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18936:	1ad3      	subs	r3, r2, r3
   18938:	3b01      	subs	r3, #1
   1893a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1893c:	697a      	ldr	r2, [r7, #20]
   1893e:	687b      	ldr	r3, [r7, #4]
   18940:	4293      	cmp	r3, r2
   18942:	bfa8      	it	ge
   18944:	4613      	movge	r3, r2
   18946:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   18948:	2300      	movs	r3, #0
   1894a:	62bb      	str	r3, [r7, #40]	; 0x28
   1894c:	e015      	b.n	1897a <ftoa+0x196>
        {
            i32FracPart *= 10;
   1894e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18950:	4613      	mov	r3, r2
   18952:	009b      	lsls	r3, r3, #2
   18954:	4413      	add	r3, r2
   18956:	005b      	lsls	r3, r3, #1
   18958:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1895c:	161b      	asrs	r3, r3, #24
   1895e:	b2da      	uxtb	r2, r3
   18960:	68bb      	ldr	r3, [r7, #8]
   18962:	1c59      	adds	r1, r3, #1
   18964:	60b9      	str	r1, [r7, #8]
   18966:	3230      	adds	r2, #48	; 0x30
   18968:	b2d2      	uxtb	r2, r2
   1896a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   1896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1896e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18972:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   18974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18976:	3301      	adds	r3, #1
   18978:	62bb      	str	r3, [r7, #40]	; 0x28
   1897a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1897c:	697b      	ldr	r3, [r7, #20]
   1897e:	429a      	cmp	r2, r3
   18980:	dbe5      	blt.n	1894e <ftoa+0x16a>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   18982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18984:	4613      	mov	r3, r2
   18986:	009b      	lsls	r3, r3, #2
   18988:	4413      	add	r3, r2
   1898a:	005b      	lsls	r3, r3, #1
   1898c:	161b      	asrs	r3, r3, #24
   1898e:	2b04      	cmp	r3, #4
   18990:	dd1d      	ble.n	189ce <ftoa+0x1ea>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   18992:	68bb      	ldr	r3, [r7, #8]
   18994:	3b01      	subs	r3, #1
   18996:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   18998:	e015      	b.n	189c6 <ftoa+0x1e2>
            {
                if ( *pcBuftmp == '.' )
   1899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1899c:	781b      	ldrb	r3, [r3, #0]
   1899e:	2b2e      	cmp	r3, #46	; 0x2e
   189a0:	d00e      	beq.n	189c0 <ftoa+0x1dc>
                {
                }
                else if ( *pcBuftmp == '9' )
   189a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189a4:	781b      	ldrb	r3, [r3, #0]
   189a6:	2b39      	cmp	r3, #57	; 0x39
   189a8:	d103      	bne.n	189b2 <ftoa+0x1ce>
                {
                    *pcBuftmp = '0';
   189aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189ac:	2230      	movs	r2, #48	; 0x30
   189ae:	701a      	strb	r2, [r3, #0]
   189b0:	e006      	b.n	189c0 <ftoa+0x1dc>
                }
                else
                {
                    *pcBuftmp += 1;
   189b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189b4:	781b      	ldrb	r3, [r3, #0]
   189b6:	3301      	adds	r3, #1
   189b8:	b2da      	uxtb	r2, r3
   189ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189bc:	701a      	strb	r2, [r3, #0]
                    break;
   189be:	e006      	b.n	189ce <ftoa+0x1ea>
                }
                pcBuftmp--;
   189c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189c2:	3b01      	subs	r3, #1
   189c4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   189c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   189c8:	6a3b      	ldr	r3, [r7, #32]
   189ca:	429a      	cmp	r2, r3
   189cc:	d2e5      	bcs.n	1899a <ftoa+0x1b6>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   189ce:	68bb      	ldr	r3, [r7, #8]
   189d0:	2200      	movs	r2, #0
   189d2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   189d4:	68ba      	ldr	r2, [r7, #8]
   189d6:	6a3b      	ldr	r3, [r7, #32]
   189d8:	1ad3      	subs	r3, r2, r3
} // ftoa()
   189da:	4618      	mov	r0, r3
   189dc:	3738      	adds	r7, #56	; 0x38
   189de:	46bd      	mov	sp, r7
   189e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   189e4:	00302e30 	.word	0x00302e30

000189e8 <am_util_stdio_vsprintf>:
// Format data into string. (va_list implementation)
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   189e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   189ec:	b098      	sub	sp, #96	; 0x60
   189ee:	af00      	add	r7, sp, #0
   189f0:	6178      	str	r0, [r7, #20]
   189f2:	6139      	str	r1, [r7, #16]
   189f4:	60fa      	str	r2, [r7, #12]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   189f6:	2300      	movs	r3, #0
   189f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   189fa:	2300      	movs	r3, #0
   189fc:	637b      	str	r3, [r7, #52]	; 0x34

    while ( *pcFmt != 0x0 )
   189fe:	e2ed      	b.n	18fdc <am_util_stdio_vsprintf+0x5f4>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   18a00:	2306      	movs	r3, #6
   18a02:	643b      	str	r3, [r7, #64]	; 0x40

        if ( *pcFmt != '%' )
   18a04:	693b      	ldr	r3, [r7, #16]
   18a06:	781b      	ldrb	r3, [r3, #0]
   18a08:	2b25      	cmp	r3, #37	; 0x25
   18a0a:	d01f      	beq.n	18a4c <am_util_stdio_vsprintf+0x64>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   18a0c:	697b      	ldr	r3, [r7, #20]
   18a0e:	2b00      	cmp	r3, #0
   18a10:	d015      	beq.n	18a3e <am_util_stdio_vsprintf+0x56>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   18a12:	693b      	ldr	r3, [r7, #16]
   18a14:	781b      	ldrb	r3, [r3, #0]
   18a16:	2b0a      	cmp	r3, #10
   18a18:	d10b      	bne.n	18a32 <am_util_stdio_vsprintf+0x4a>
   18a1a:	4ba9      	ldr	r3, [pc, #676]	; (18cc0 <am_util_stdio_vsprintf+0x2d8>)
   18a1c:	781b      	ldrb	r3, [r3, #0]
   18a1e:	2b00      	cmp	r3, #0
   18a20:	d007      	beq.n	18a32 <am_util_stdio_vsprintf+0x4a>
                {
                    *pcBuf++ = '\r';
   18a22:	697b      	ldr	r3, [r7, #20]
   18a24:	1c5a      	adds	r2, r3, #1
   18a26:	617a      	str	r2, [r7, #20]
   18a28:	220d      	movs	r2, #13
   18a2a:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   18a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18a2e:	3301      	adds	r3, #1
   18a30:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                *pcBuf++ = *pcFmt;
   18a32:	697b      	ldr	r3, [r7, #20]
   18a34:	1c5a      	adds	r2, r3, #1
   18a36:	617a      	str	r2, [r7, #20]
   18a38:	693a      	ldr	r2, [r7, #16]
   18a3a:	7812      	ldrb	r2, [r2, #0]
   18a3c:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   18a3e:	693b      	ldr	r3, [r7, #16]
   18a40:	3301      	adds	r3, #1
   18a42:	613b      	str	r3, [r7, #16]
            ++ui32CharCnt;
   18a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18a46:	3301      	adds	r3, #1
   18a48:	64fb      	str	r3, [r7, #76]	; 0x4c
            continue;
   18a4a:	e2c7      	b.n	18fdc <am_util_stdio_vsprintf+0x5f4>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   18a4c:	693b      	ldr	r3, [r7, #16]
   18a4e:	3301      	adds	r3, #1
   18a50:	613b      	str	r3, [r7, #16]
        bLower = bLongLong = false;
   18a52:	2300      	movs	r3, #0
   18a54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   18a58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   18a5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   18a60:	2320      	movs	r3, #32
   18a62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if ( *pcFmt == '0' )
   18a66:	693b      	ldr	r3, [r7, #16]
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	2b30      	cmp	r3, #48	; 0x30
   18a6c:	d105      	bne.n	18a7a <am_util_stdio_vsprintf+0x92>
        {
            ui8PadChar = '0';
   18a6e:	2330      	movs	r3, #48	; 0x30
   18a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            ++pcFmt;
   18a74:	693b      	ldr	r3, [r7, #16]
   18a76:	3301      	adds	r3, #1
   18a78:	613b      	str	r3, [r7, #16]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   18a7a:	f107 031c 	add.w	r3, r7, #28
   18a7e:	4619      	mov	r1, r3
   18a80:	6938      	ldr	r0, [r7, #16]
   18a82:	f7ff fd7f 	bl	18584 <decstr_to_int>
   18a86:	4603      	mov	r3, r0
   18a88:	64bb      	str	r3, [r7, #72]	; 0x48
        pcFmt += ui32NumChars;
   18a8a:	69fb      	ldr	r3, [r7, #28]
   18a8c:	693a      	ldr	r2, [r7, #16]
   18a8e:	4413      	add	r3, r2
   18a90:	613b      	str	r3, [r7, #16]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   18a92:	693b      	ldr	r3, [r7, #16]
   18a94:	781b      	ldrb	r3, [r3, #0]
   18a96:	2b73      	cmp	r3, #115	; 0x73
   18a98:	d005      	beq.n	18aa6 <am_util_stdio_vsprintf+0xbe>
   18a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18a9c:	2b00      	cmp	r3, #0
   18a9e:	da02      	bge.n	18aa6 <am_util_stdio_vsprintf+0xbe>
        {
            iWidth = -iWidth;
   18aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18aa2:	425b      	negs	r3, r3
   18aa4:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   18aa6:	693b      	ldr	r3, [r7, #16]
   18aa8:	781b      	ldrb	r3, [r3, #0]
   18aaa:	2b2e      	cmp	r3, #46	; 0x2e
   18aac:	d10e      	bne.n	18acc <am_util_stdio_vsprintf+0xe4>
        {
            ++pcFmt;
   18aae:	693b      	ldr	r3, [r7, #16]
   18ab0:	3301      	adds	r3, #1
   18ab2:	613b      	str	r3, [r7, #16]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   18ab4:	f107 031c 	add.w	r3, r7, #28
   18ab8:	4619      	mov	r1, r3
   18aba:	6938      	ldr	r0, [r7, #16]
   18abc:	f7ff fd62 	bl	18584 <decstr_to_int>
   18ac0:	4603      	mov	r3, r0
   18ac2:	643b      	str	r3, [r7, #64]	; 0x40
            pcFmt += ui32NumChars;
   18ac4:	69fb      	ldr	r3, [r7, #28]
   18ac6:	693a      	ldr	r2, [r7, #16]
   18ac8:	4413      	add	r3, r2
   18aca:	613b      	str	r3, [r7, #16]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   18acc:	693b      	ldr	r3, [r7, #16]
   18ace:	781b      	ldrb	r3, [r3, #0]
   18ad0:	2b6c      	cmp	r3, #108	; 0x6c
   18ad2:	d10c      	bne.n	18aee <am_util_stdio_vsprintf+0x106>
        {
            pcFmt++;
   18ad4:	693b      	ldr	r3, [r7, #16]
   18ad6:	3301      	adds	r3, #1
   18ad8:	613b      	str	r3, [r7, #16]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   18ada:	693b      	ldr	r3, [r7, #16]
   18adc:	781b      	ldrb	r3, [r3, #0]
   18ade:	2b6c      	cmp	r3, #108	; 0x6c
   18ae0:	d105      	bne.n	18aee <am_util_stdio_vsprintf+0x106>
            {
                pcFmt++;
   18ae2:	693b      	ldr	r3, [r7, #16]
   18ae4:	3301      	adds	r3, #1
   18ae6:	613b      	str	r3, [r7, #16]
                bLongLong = true;
   18ae8:	2301      	movs	r3, #1
   18aea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            }
        }

        switch ( *pcFmt )
   18aee:	693b      	ldr	r3, [r7, #16]
   18af0:	781b      	ldrb	r3, [r3, #0]
   18af2:	3b46      	subs	r3, #70	; 0x46
   18af4:	2b32      	cmp	r3, #50	; 0x32
   18af6:	f200 825e 	bhi.w	18fb6 <am_util_stdio_vsprintf+0x5ce>
   18afa:	a201      	add	r2, pc, #4	; (adr r2, 18b00 <am_util_stdio_vsprintf+0x118>)
   18afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18b00:	00018f3d 	.word	0x00018f3d
   18b04:	00018fb7 	.word	0x00018fb7
   18b08:	00018fb7 	.word	0x00018fb7
   18b0c:	00018fb7 	.word	0x00018fb7
   18b10:	00018fb7 	.word	0x00018fb7
   18b14:	00018fb7 	.word	0x00018fb7
   18b18:	00018fb7 	.word	0x00018fb7
   18b1c:	00018fb7 	.word	0x00018fb7
   18b20:	00018fb7 	.word	0x00018fb7
   18b24:	00018fb7 	.word	0x00018fb7
   18b28:	00018fb7 	.word	0x00018fb7
   18b2c:	00018fb7 	.word	0x00018fb7
   18b30:	00018fb7 	.word	0x00018fb7
   18b34:	00018fb7 	.word	0x00018fb7
   18b38:	00018fb7 	.word	0x00018fb7
   18b3c:	00018fb7 	.word	0x00018fb7
   18b40:	00018fb7 	.word	0x00018fb7
   18b44:	00018fb7 	.word	0x00018fb7
   18b48:	00018ccb 	.word	0x00018ccb
   18b4c:	00018fb7 	.word	0x00018fb7
   18b50:	00018fb7 	.word	0x00018fb7
   18b54:	00018fb7 	.word	0x00018fb7
   18b58:	00018fb7 	.word	0x00018fb7
   18b5c:	00018fb7 	.word	0x00018fb7
   18b60:	00018fb7 	.word	0x00018fb7
   18b64:	00018fb7 	.word	0x00018fb7
   18b68:	00018fb7 	.word	0x00018fb7
   18b6c:	00018fb7 	.word	0x00018fb7
   18b70:	00018fb7 	.word	0x00018fb7
   18b74:	00018bcd 	.word	0x00018bcd
   18b78:	00018dfb 	.word	0x00018dfb
   18b7c:	00018fb7 	.word	0x00018fb7
   18b80:	00018f3d 	.word	0x00018f3d
   18b84:	00018fb7 	.word	0x00018fb7
   18b88:	00018fb7 	.word	0x00018fb7
   18b8c:	00018dfb 	.word	0x00018dfb
   18b90:	00018fb7 	.word	0x00018fb7
   18b94:	00018fb7 	.word	0x00018fb7
   18b98:	00018fb7 	.word	0x00018fb7
   18b9c:	00018fb7 	.word	0x00018fb7
   18ba0:	00018fb7 	.word	0x00018fb7
   18ba4:	00018fb7 	.word	0x00018fb7
   18ba8:	00018fb7 	.word	0x00018fb7
   18bac:	00018fb7 	.word	0x00018fb7
   18bb0:	00018fb7 	.word	0x00018fb7
   18bb4:	00018bf3 	.word	0x00018bf3
   18bb8:	00018fb7 	.word	0x00018fb7
   18bbc:	00018d65 	.word	0x00018d65
   18bc0:	00018fb7 	.word	0x00018fb7
   18bc4:	00018fb7 	.word	0x00018fb7
   18bc8:	00018cc5 	.word	0x00018cc5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   18bcc:	68fb      	ldr	r3, [r7, #12]
   18bce:	1d1a      	adds	r2, r3, #4
   18bd0:	60fa      	str	r2, [r7, #12]
   18bd2:	681b      	ldr	r3, [r3, #0]
   18bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if ( pcBuf )
   18bd8:	697b      	ldr	r3, [r7, #20]
   18bda:	2b00      	cmp	r3, #0
   18bdc:	d005      	beq.n	18bea <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   18bde:	697b      	ldr	r3, [r7, #20]
   18be0:	1c5a      	adds	r2, r3, #1
   18be2:	617a      	str	r2, [r7, #20]
   18be4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   18be8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   18bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18bec:	3301      	adds	r3, #1
   18bee:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
   18bf0:	e1f1      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>

            case 's':
                pcStr = va_arg(pArgs, char *);
   18bf2:	68fb      	ldr	r3, [r7, #12]
   18bf4:	1d1a      	adds	r2, r3, #4
   18bf6:	60fa      	str	r2, [r7, #12]
   18bf8:	681b      	ldr	r3, [r3, #0]
   18bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   18bfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   18bfe:	f7ff fdb1 	bl	18764 <simple_strlen>
   18c02:	6378      	str	r0, [r7, #52]	; 0x34
                if ( iWidth > 0 )
   18c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c06:	2b00      	cmp	r3, #0
   18c08:	dd2e      	ble.n	18c68 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   18c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18c0e:	429a      	cmp	r2, r3
   18c10:	d22a      	bcs.n	18c68 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   18c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18c16:	1ad3      	subs	r3, r2, r3
   18c18:	64bb      	str	r3, [r7, #72]	; 0x48
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   18c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18c20:	4619      	mov	r1, r3
   18c22:	6978      	ldr	r0, [r7, #20]
   18c24:	f7ff fdb9 	bl	1879a <padbuffer>
   18c28:	64b8      	str	r0, [r7, #72]	; 0x48
                        pcBuf += pcBuf ? iWidth : 0;
   18c2a:	697b      	ldr	r3, [r7, #20]
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	d001      	beq.n	18c34 <am_util_stdio_vsprintf+0x24c>
   18c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c32:	e000      	b.n	18c36 <am_util_stdio_vsprintf+0x24e>
   18c34:	2300      	movs	r3, #0
   18c36:	697a      	ldr	r2, [r7, #20]
   18c38:	4413      	add	r3, r2
   18c3a:	617b      	str	r3, [r7, #20]
                        ui32CharCnt += iWidth;
   18c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18c40:	4413      	add	r3, r2
   18c42:	64fb      	str	r3, [r7, #76]	; 0x4c
                        iWidth = 0;
   18c44:	2300      	movs	r3, #0
   18c46:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                }

                while (*pcStr != 0x0)
   18c48:	e00e      	b.n	18c68 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   18c4a:	697b      	ldr	r3, [r7, #20]
   18c4c:	2b00      	cmp	r3, #0
   18c4e:	d005      	beq.n	18c5c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   18c50:	697b      	ldr	r3, [r7, #20]
   18c52:	1c5a      	adds	r2, r3, #1
   18c54:	617a      	str	r2, [r7, #20]
   18c56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   18c58:	7812      	ldrb	r2, [r2, #0]
   18c5a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   18c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18c5e:	3301      	adds	r3, #1
   18c60:	65fb      	str	r3, [r7, #92]	; 0x5c
                    ++ui32CharCnt;
   18c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18c64:	3301      	adds	r3, #1
   18c66:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (*pcStr != 0x0)
   18c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   18c6a:	781b      	ldrb	r3, [r3, #0]
   18c6c:	2b00      	cmp	r3, #0
   18c6e:	d1ec      	bne.n	18c4a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   18c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c72:	2b00      	cmp	r3, #0
   18c74:	f000 81ac 	beq.w	18fd0 <am_util_stdio_vsprintf+0x5e8>
                {
                    iWidth = -iWidth;
   18c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c7a:	425b      	negs	r3, r3
   18c7c:	64bb      	str	r3, [r7, #72]	; 0x48

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   18c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18c82:	429a      	cmp	r2, r3
   18c84:	f080 81a4 	bcs.w	18fd0 <am_util_stdio_vsprintf+0x5e8>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   18c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18c8c:	1ad3      	subs	r3, r2, r3
   18c8e:	64bb      	str	r3, [r7, #72]	; 0x48
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   18c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18c96:	4619      	mov	r1, r3
   18c98:	6978      	ldr	r0, [r7, #20]
   18c9a:	f7ff fd7e 	bl	1879a <padbuffer>
   18c9e:	64b8      	str	r0, [r7, #72]	; 0x48
                        pcBuf += pcBuf ? iWidth : 0;
   18ca0:	697b      	ldr	r3, [r7, #20]
   18ca2:	2b00      	cmp	r3, #0
   18ca4:	d001      	beq.n	18caa <am_util_stdio_vsprintf+0x2c2>
   18ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18ca8:	e000      	b.n	18cac <am_util_stdio_vsprintf+0x2c4>
   18caa:	2300      	movs	r3, #0
   18cac:	697a      	ldr	r2, [r7, #20]
   18cae:	4413      	add	r3, r2
   18cb0:	617b      	str	r3, [r7, #20]
                        ui32CharCnt += iWidth;
   18cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18cb6:	4413      	add	r3, r2
   18cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
                        iWidth = 0;
   18cba:	2300      	movs	r3, #0
   18cbc:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                }
                break;
   18cbe:	e187      	b.n	18fd0 <am_util_stdio_vsprintf+0x5e8>
   18cc0:	10000420 	.word	0x10000420

            case 'x':
                bLower = true;
   18cc4:	2301      	movs	r3, #1
   18cc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   18cca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   18cce:	2b00      	cmp	r3, #0
   18cd0:	d009      	beq.n	18ce6 <am_util_stdio_vsprintf+0x2fe>
   18cd2:	68fb      	ldr	r3, [r7, #12]
   18cd4:	3307      	adds	r3, #7
   18cd6:	f023 0307 	bic.w	r3, r3, #7
   18cda:	f103 0208 	add.w	r2, r3, #8
   18cde:	60fa      	str	r2, [r7, #12]
   18ce0:	e9d3 4500 	ldrd	r4, r5, [r3]
   18ce4:	e006      	b.n	18cf4 <am_util_stdio_vsprintf+0x30c>
                                      va_arg(pArgs, uint32_t);
   18ce6:	68fb      	ldr	r3, [r7, #12]
   18ce8:	1d1a      	adds	r2, r3, #4
   18cea:	60fa      	str	r2, [r7, #12]
   18cec:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   18cee:	2200      	movs	r2, #0
   18cf0:	461c      	mov	r4, r3
   18cf2:	4615      	mov	r5, r2
   18cf4:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50

                if ( iWidth )
   18cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18cfa:	2b00      	cmp	r3, #0
   18cfc:	d01e      	beq.n	18d3c <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   18cfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18d02:	f7ff fc16 	bl	18532 <ndigits_in_hex>
   18d06:	4602      	mov	r2, r0
   18d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18d0a:	1a9b      	subs	r3, r3, r2
   18d0c:	64bb      	str	r3, [r7, #72]	; 0x48

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   18d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18d14:	4619      	mov	r1, r3
   18d16:	6978      	ldr	r0, [r7, #20]
   18d18:	f7ff fd3f 	bl	1879a <padbuffer>
   18d1c:	64b8      	str	r0, [r7, #72]	; 0x48
                    pcBuf += pcBuf ? iWidth : 0;
   18d1e:	697b      	ldr	r3, [r7, #20]
   18d20:	2b00      	cmp	r3, #0
   18d22:	d001      	beq.n	18d28 <am_util_stdio_vsprintf+0x340>
   18d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18d26:	e000      	b.n	18d2a <am_util_stdio_vsprintf+0x342>
   18d28:	2300      	movs	r3, #0
   18d2a:	697a      	ldr	r2, [r7, #20]
   18d2c:	4413      	add	r3, r2
   18d2e:	617b      	str	r3, [r7, #20]
                    ui32CharCnt += iWidth;
   18d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18d34:	4413      	add	r3, r2
   18d36:	64fb      	str	r3, [r7, #76]	; 0x4c
                    iWidth = 0;
   18d38:	2300      	movs	r3, #0
   18d3a:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   18d3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   18d40:	697a      	ldr	r2, [r7, #20]
   18d42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18d46:	f7ff fcaa 	bl	1869e <uint64_to_hexstr>
   18d4a:	6478      	str	r0, [r7, #68]	; 0x44

                if ( pcBuf )
   18d4c:	697b      	ldr	r3, [r7, #20]
   18d4e:	2b00      	cmp	r3, #0
   18d50:	d003      	beq.n	18d5a <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   18d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18d54:	697a      	ldr	r2, [r7, #20]
   18d56:	4413      	add	r3, r2
   18d58:	617b      	str	r3, [r7, #20]
                }

                ui32CharCnt += iVal;
   18d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18d5e:	4413      	add	r3, r2
   18d60:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
   18d62:	e138      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   18d64:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   18d68:	2b00      	cmp	r3, #0
   18d6a:	d009      	beq.n	18d80 <am_util_stdio_vsprintf+0x398>
   18d6c:	68fb      	ldr	r3, [r7, #12]
   18d6e:	3307      	adds	r3, #7
   18d70:	f023 0307 	bic.w	r3, r3, #7
   18d74:	f103 0208 	add.w	r2, r3, #8
   18d78:	60fa      	str	r2, [r7, #12]
   18d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
   18d7e:	e006      	b.n	18d8e <am_util_stdio_vsprintf+0x3a6>
                                      va_arg(pArgs, uint32_t);
   18d80:	68fb      	ldr	r3, [r7, #12]
   18d82:	1d1a      	adds	r2, r3, #4
   18d84:	60fa      	str	r2, [r7, #12]
   18d86:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   18d88:	2200      	movs	r2, #0
   18d8a:	4698      	mov	r8, r3
   18d8c:	4691      	mov	r9, r2
   18d8e:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50

                if ( iWidth )
   18d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18d94:	2b00      	cmp	r3, #0
   18d96:	d01e      	beq.n	18dd6 <am_util_stdio_vsprintf+0x3ee>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   18d98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18d9c:	f7ff fb8c 	bl	184b8 <ndigits_in_u64>
   18da0:	4602      	mov	r2, r0
   18da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18da4:	1a9b      	subs	r3, r3, r2
   18da6:	64bb      	str	r3, [r7, #72]	; 0x48

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   18da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18dae:	4619      	mov	r1, r3
   18db0:	6978      	ldr	r0, [r7, #20]
   18db2:	f7ff fcf2 	bl	1879a <padbuffer>
   18db6:	64b8      	str	r0, [r7, #72]	; 0x48
                    pcBuf += pcBuf ? iWidth : 0;
   18db8:	697b      	ldr	r3, [r7, #20]
   18dba:	2b00      	cmp	r3, #0
   18dbc:	d001      	beq.n	18dc2 <am_util_stdio_vsprintf+0x3da>
   18dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18dc0:	e000      	b.n	18dc4 <am_util_stdio_vsprintf+0x3dc>
   18dc2:	2300      	movs	r3, #0
   18dc4:	697a      	ldr	r2, [r7, #20]
   18dc6:	4413      	add	r3, r2
   18dc8:	617b      	str	r3, [r7, #20]
                    ui32CharCnt += iWidth;
   18dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18dce:	4413      	add	r3, r2
   18dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    iWidth = 0;
   18dd2:	2300      	movs	r3, #0
   18dd4:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   18dd6:	697a      	ldr	r2, [r7, #20]
   18dd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18ddc:	f7ff fc18 	bl	18610 <uint64_to_str>
   18de0:	6478      	str	r0, [r7, #68]	; 0x44

                if ( pcBuf )
   18de2:	697b      	ldr	r3, [r7, #20]
   18de4:	2b00      	cmp	r3, #0
   18de6:	d003      	beq.n	18df0 <am_util_stdio_vsprintf+0x408>
                {
                    pcBuf += iVal;
   18de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18dea:	697a      	ldr	r2, [r7, #20]
   18dec:	4413      	add	r3, r2
   18dee:	617b      	str	r3, [r7, #20]
                }

                ui32CharCnt += iVal;
   18df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18df4:	4413      	add	r3, r2
   18df6:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
   18df8:	e0ed      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   18dfa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   18dfe:	2b00      	cmp	r3, #0
   18e00:	d009      	beq.n	18e16 <am_util_stdio_vsprintf+0x42e>
   18e02:	68fb      	ldr	r3, [r7, #12]
   18e04:	3307      	adds	r3, #7
   18e06:	f023 0307 	bic.w	r3, r3, #7
   18e0a:	f103 0208 	add.w	r2, r3, #8
   18e0e:	60fa      	str	r2, [r7, #12]
   18e10:	e9d3 ab00 	ldrd	sl, fp, [r3]
   18e14:	e006      	b.n	18e24 <am_util_stdio_vsprintf+0x43c>
                                     va_arg(pArgs, int32_t);
   18e16:	68fb      	ldr	r3, [r7, #12]
   18e18:	1d1a      	adds	r2, r3, #4
   18e1a:	60fa      	str	r2, [r7, #12]
   18e1c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   18e1e:	17da      	asrs	r2, r3, #31
   18e20:	469a      	mov	sl, r3
   18e22:	4693      	mov	fp, r2
   18e24:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   18e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   18e2c:	2b00      	cmp	r3, #0
   18e2e:	da0f      	bge.n	18e50 <am_util_stdio_vsprintf+0x468>
                {
                    ui64Val = -i64Val;          // Get absolute value
   18e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   18e34:	2100      	movs	r1, #0
   18e36:	4250      	negs	r0, r2
   18e38:	6038      	str	r0, [r7, #0]
   18e3a:	eb61 0303 	sbc.w	r3, r1, r3
   18e3e:	607b      	str	r3, [r7, #4]
   18e40:	e9d7 2300 	ldrd	r2, r3, [r7]
   18e44:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
                    bNeg = true;
   18e48:	2301      	movs	r3, #1
   18e4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   18e4e:	e006      	b.n	18e5e <am_util_stdio_vsprintf+0x476>
                }
                else
                {
                    ui64Val = i64Val;
   18e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   18e54:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
                    bNeg = false;
   18e58:	2300      	movs	r3, #0
   18e5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                }

                if ( iWidth )
   18e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18e60:	2b00      	cmp	r3, #0
   18e62:	d04a      	beq.n	18efa <am_util_stdio_vsprintf+0x512>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   18e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   18e68:	4610      	mov	r0, r2
   18e6a:	4619      	mov	r1, r3
   18e6c:	f7ff fb45 	bl	184fa <ndigits_in_i64>
   18e70:	4602      	mov	r2, r0
   18e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18e74:	1a9b      	subs	r3, r3, r2
   18e76:	64bb      	str	r3, [r7, #72]	; 0x48

                    if ( bNeg )
   18e78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   18e7c:	2b00      	cmp	r3, #0
   18e7e:	d011      	beq.n	18ea4 <am_util_stdio_vsprintf+0x4bc>
                    {
                        --iWidth;
   18e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18e82:	3b01      	subs	r3, #1
   18e84:	64bb      	str	r3, [r7, #72]	; 0x48

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   18e86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18e8a:	2b30      	cmp	r3, #48	; 0x30
   18e8c:	d10a      	bne.n	18ea4 <am_util_stdio_vsprintf+0x4bc>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   18e8e:	697b      	ldr	r3, [r7, #20]
   18e90:	2b00      	cmp	r3, #0
   18e92:	d004      	beq.n	18e9e <am_util_stdio_vsprintf+0x4b6>
                            {
                                *pcBuf++ = '-';
   18e94:	697b      	ldr	r3, [r7, #20]
   18e96:	1c5a      	adds	r2, r3, #1
   18e98:	617a      	str	r2, [r7, #20]
   18e9a:	222d      	movs	r2, #45	; 0x2d
   18e9c:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   18e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18ea0:	3301      	adds	r3, #1
   18ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   18ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   18eaa:	4619      	mov	r1, r3
   18eac:	6978      	ldr	r0, [r7, #20]
   18eae:	f7ff fc74 	bl	1879a <padbuffer>
   18eb2:	64b8      	str	r0, [r7, #72]	; 0x48
                    pcBuf += pcBuf ? iWidth : 0;
   18eb4:	697b      	ldr	r3, [r7, #20]
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d001      	beq.n	18ebe <am_util_stdio_vsprintf+0x4d6>
   18eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18ebc:	e000      	b.n	18ec0 <am_util_stdio_vsprintf+0x4d8>
   18ebe:	2300      	movs	r3, #0
   18ec0:	697a      	ldr	r2, [r7, #20]
   18ec2:	4413      	add	r3, r2
   18ec4:	617b      	str	r3, [r7, #20]
                    ui32CharCnt += iWidth;
   18ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18eca:	4413      	add	r3, r2
   18ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    iWidth = 0;
   18ece:	2300      	movs	r3, #0
   18ed0:	64bb      	str	r3, [r7, #72]	; 0x48

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   18ed2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   18ed6:	2b00      	cmp	r3, #0
   18ed8:	d01e      	beq.n	18f18 <am_util_stdio_vsprintf+0x530>
   18eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   18ede:	2b20      	cmp	r3, #32
   18ee0:	d11a      	bne.n	18f18 <am_util_stdio_vsprintf+0x530>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   18ee2:	697b      	ldr	r3, [r7, #20]
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d004      	beq.n	18ef2 <am_util_stdio_vsprintf+0x50a>
                        {
                            *pcBuf++ = '-';
   18ee8:	697b      	ldr	r3, [r7, #20]
   18eea:	1c5a      	adds	r2, r3, #1
   18eec:	617a      	str	r2, [r7, #20]
   18eee:	222d      	movs	r2, #45	; 0x2d
   18ef0:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   18ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18ef4:	3301      	adds	r3, #1
   18ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   18ef8:	e00e      	b.n	18f18 <am_util_stdio_vsprintf+0x530>
                    }
                }
                else
                {
                    if ( bNeg )
   18efa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   18efe:	2b00      	cmp	r3, #0
   18f00:	d00a      	beq.n	18f18 <am_util_stdio_vsprintf+0x530>
                    {
                        if ( pcBuf )
   18f02:	697b      	ldr	r3, [r7, #20]
   18f04:	2b00      	cmp	r3, #0
   18f06:	d004      	beq.n	18f12 <am_util_stdio_vsprintf+0x52a>
                        {
                            *pcBuf++ = '-';
   18f08:	697b      	ldr	r3, [r7, #20]
   18f0a:	1c5a      	adds	r2, r3, #1
   18f0c:	617a      	str	r2, [r7, #20]
   18f0e:	222d      	movs	r2, #45	; 0x2d
   18f10:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   18f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18f14:	3301      	adds	r3, #1
   18f16:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   18f18:	697a      	ldr	r2, [r7, #20]
   18f1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   18f1e:	f7ff fb77 	bl	18610 <uint64_to_str>
   18f22:	6478      	str	r0, [r7, #68]	; 0x44

                if ( pcBuf )
   18f24:	697b      	ldr	r3, [r7, #20]
   18f26:	2b00      	cmp	r3, #0
   18f28:	d003      	beq.n	18f32 <am_util_stdio_vsprintf+0x54a>
                {
                    pcBuf += iVal;
   18f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18f2c:	697a      	ldr	r2, [r7, #20]
   18f2e:	4413      	add	r3, r2
   18f30:	617b      	str	r3, [r7, #20]
                }

                ui32CharCnt += iVal;
   18f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18f36:	4413      	add	r3, r2
   18f38:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
   18f3a:	e04c      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>


            case 'f':
            case 'F':
                if ( pcBuf )
   18f3c:	697b      	ldr	r3, [r7, #20]
   18f3e:	2b00      	cmp	r3, #0
   18f40:	d048      	beq.n	18fd4 <am_util_stdio_vsprintf+0x5ec>
                {
                    float fValue = va_arg(pArgs, double);
   18f42:	68fb      	ldr	r3, [r7, #12]
   18f44:	3307      	adds	r3, #7
   18f46:	f023 0307 	bic.w	r3, r3, #7
   18f4a:	f103 0208 	add.w	r2, r3, #8
   18f4e:	60fa      	str	r2, [r7, #12]
   18f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f54:	4610      	mov	r0, r2
   18f56:	4619      	mov	r1, r3
   18f58:	f7ff f952 	bl	18200 <__aeabi_d2f>
   18f5c:	4603      	mov	r3, r0
   18f5e:	623b      	str	r3, [r7, #32]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   18f60:	697b      	ldr	r3, [r7, #20]
   18f62:	2214      	movs	r2, #20
   18f64:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   18f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
   18f68:	6978      	ldr	r0, [r7, #20]
   18f6a:	ed97 0a08 	vldr	s0, [r7, #32]
   18f6e:	f7ff fc39 	bl	187e4 <ftoa>
   18f72:	6478      	str	r0, [r7, #68]	; 0x44
                    if ( iVal < 0 )
   18f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18f76:	2b00      	cmp	r3, #0
   18f78:	da14      	bge.n	18fa4 <am_util_stdio_vsprintf+0x5bc>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   18f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18f80:	d102      	bne.n	18f88 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   18f82:	4b1f      	ldr	r3, [pc, #124]	; (19000 <am_util_stdio_vsprintf+0x618>)
   18f84:	63bb      	str	r3, [r7, #56]	; 0x38
   18f86:	e008      	b.n	18f9a <am_util_stdio_vsprintf+0x5b2>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   18f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18f8a:	f113 0f02 	cmn.w	r3, #2
   18f8e:	d102      	bne.n	18f96 <am_util_stdio_vsprintf+0x5ae>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   18f90:	4b1c      	ldr	r3, [pc, #112]	; (19004 <am_util_stdio_vsprintf+0x61c>)
   18f92:	63bb      	str	r3, [r7, #56]	; 0x38
   18f94:	e001      	b.n	18f9a <am_util_stdio_vsprintf+0x5b2>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   18f96:	4b1c      	ldr	r3, [pc, #112]	; (19008 <am_util_stdio_vsprintf+0x620>)
   18f98:	63bb      	str	r3, [r7, #56]	; 0x38
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   18f9a:	697b      	ldr	r3, [r7, #20]
   18f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18f9e:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   18fa0:	2303      	movs	r3, #3
   18fa2:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    ui32CharCnt += iVal;
   18fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18fa8:	4413      	add	r3, r2
   18faa:	64fb      	str	r3, [r7, #76]	; 0x4c
                    pcBuf += iVal;
   18fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18fae:	697a      	ldr	r2, [r7, #20]
   18fb0:	4413      	add	r3, r2
   18fb2:	617b      	str	r3, [r7, #20]
                }
                break;
   18fb4:	e00e      	b.n	18fd4 <am_util_stdio_vsprintf+0x5ec>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   18fb6:	697b      	ldr	r3, [r7, #20]
   18fb8:	2b00      	cmp	r3, #0
   18fba:	d005      	beq.n	18fc8 <am_util_stdio_vsprintf+0x5e0>
                {
                    *pcBuf++ = *pcFmt;
   18fbc:	697b      	ldr	r3, [r7, #20]
   18fbe:	1c5a      	adds	r2, r3, #1
   18fc0:	617a      	str	r2, [r7, #20]
   18fc2:	693a      	ldr	r2, [r7, #16]
   18fc4:	7812      	ldrb	r2, [r2, #0]
   18fc6:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   18fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18fca:	3301      	adds	r3, #1
   18fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
   18fce:	e002      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>
                break;
   18fd0:	bf00      	nop
   18fd2:	e000      	b.n	18fd6 <am_util_stdio_vsprintf+0x5ee>
                break;
   18fd4:	bf00      	nop
        } // switch ()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   18fd6:	693b      	ldr	r3, [r7, #16]
   18fd8:	3301      	adds	r3, #1
   18fda:	613b      	str	r3, [r7, #16]
    while ( *pcFmt != 0x0 )
   18fdc:	693b      	ldr	r3, [r7, #16]
   18fde:	781b      	ldrb	r3, [r3, #0]
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	f47f ad0d 	bne.w	18a00 <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   18fe6:	697b      	ldr	r3, [r7, #20]
   18fe8:	2b00      	cmp	r3, #0
   18fea:	d002      	beq.n	18ff2 <am_util_stdio_vsprintf+0x60a>
    {
        *pcBuf = 0x0;
   18fec:	697b      	ldr	r3, [r7, #20]
   18fee:	2200      	movs	r2, #0
   18ff0:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   18ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   18ff4:	4618      	mov	r0, r3
   18ff6:	3760      	adds	r7, #96	; 0x60
   18ff8:	46bd      	mov	sp, r7
   18ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   18ffe:	bf00      	nop
   19000:	00302e30 	.word	0x00302e30
   19004:	00232e23 	.word	0x00232e23
   19008:	003f2e3f 	.word	0x003f2e3f

0001900c <am_util_stdio_printf>:
// A lite version of printf()
//
//*****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1900c:	b40f      	push	{r0, r1, r2, r3}
   1900e:	b580      	push	{r7, lr}
   19010:	b082      	sub	sp, #8
   19012:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   19014:	4b0d      	ldr	r3, [pc, #52]	; (1904c <am_util_stdio_printf+0x40>)
   19016:	681b      	ldr	r3, [r3, #0]
   19018:	2b00      	cmp	r3, #0
   1901a:	d101      	bne.n	19020 <am_util_stdio_printf+0x14>
    {
        return 0;
   1901c:	2300      	movs	r3, #0
   1901e:	e00d      	b.n	1903c <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   19020:	f107 0314 	add.w	r3, r7, #20
   19024:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   19026:	683a      	ldr	r2, [r7, #0]
   19028:	6939      	ldr	r1, [r7, #16]
   1902a:	4809      	ldr	r0, [pc, #36]	; (19050 <am_util_stdio_printf+0x44>)
   1902c:	f7ff fcdc 	bl	189e8 <am_util_stdio_vsprintf>
   19030:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   19032:	4b06      	ldr	r3, [pc, #24]	; (1904c <am_util_stdio_printf+0x40>)
   19034:	681b      	ldr	r3, [r3, #0]
   19036:	4806      	ldr	r0, [pc, #24]	; (19050 <am_util_stdio_printf+0x44>)
   19038:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1903a:	687b      	ldr	r3, [r7, #4]
}
   1903c:	4618      	mov	r0, r3
   1903e:	3708      	adds	r7, #8
   19040:	46bd      	mov	sp, r7
   19042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   19046:	b004      	add	sp, #16
   19048:	4770      	bx	lr
   1904a:	bf00      	nop
   1904c:	1000001c 	.word	0x1000001c
   19050:	10000020 	.word	0x10000020

00019054 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   19054:	4811      	ldr	r0, [pc, #68]	; (1909c <zero_loop+0x12>)
   19056:	4912      	ldr	r1, [pc, #72]	; (190a0 <zero_loop+0x16>)
   19058:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   1905a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   1905e:	4811      	ldr	r0, [pc, #68]	; (190a4 <zero_loop+0x1a>)
   19060:	6801      	ldr	r1, [r0, #0]
   19062:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19066:	6001      	str	r1, [r0, #0]
   19068:	f3bf 8f4f 	dsb	sy
   1906c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   19070:	480d      	ldr	r0, [pc, #52]	; (190a8 <zero_loop+0x1e>)
   19072:	490e      	ldr	r1, [pc, #56]	; (190ac <zero_loop+0x22>)
   19074:	4a0e      	ldr	r2, [pc, #56]	; (190b0 <zero_loop+0x26>)

00019076 <copy_loop>:
   19076:	f850 3b04 	ldr.w	r3, [r0], #4
   1907a:	f841 3b04 	str.w	r3, [r1], #4
   1907e:	4291      	cmp	r1, r2
   19080:	dbf9      	blt.n	19076 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   19082:	480c      	ldr	r0, [pc, #48]	; (190b4 <zero_loop+0x2a>)
   19084:	490c      	ldr	r1, [pc, #48]	; (190b8 <zero_loop+0x2e>)
   19086:	f04f 0200 	mov.w	r2, #0

0001908a <zero_loop>:
   1908a:	4288      	cmp	r0, r1
   1908c:	bfb8      	it	lt
   1908e:	f840 2b04 	strlt.w	r2, [r0], #4
   19092:	dbfa      	blt.n	1908a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   19094:	f000 fa28 	bl	194e8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   19098:	be00      	bkpt	0x0000
}
   1909a:	bf00      	nop
   1909c:	e000ed08 	.word	0xe000ed08
   190a0:	00018000 	.word	0x00018000
   190a4:	e000ed88 	.word	0xe000ed88
   190a8:	0001ac28 	.word	0x0001ac28
   190ac:	10000000 	.word	0x10000000
   190b0:	1000001c 	.word	0x1000001c
   190b4:	1000001c 	.word	0x1000001c
   190b8:	10000c6c 	.word	0x10000c6c

000190bc <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   190bc:	b480      	push	{r7}
   190be:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   190c0:	e7fe      	b.n	190c0 <NMI_Handler+0x4>

000190c2 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   190c2:	b480      	push	{r7}
   190c4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   190c6:	e7fe      	b.n	190c6 <BusFault_Handler+0x4>

000190c8 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   190c8:	b480      	push	{r7}
   190ca:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   190cc:	e7fe      	b.n	190cc <DebugMon_Handler+0x4>
	...

000190d0 <logging_init>:


// Public API Functions ------------------------------------------------------------------------------------------------

void logging_init(void)
{
   190d0:	b580      	push	{r7, lr}
   190d2:	b082      	sub	sp, #8
   190d4:	af00      	add	r7, sp, #0
#if defined(ENABLE_LOGGING) && ((7-ENABLE_LOGGING-7 == 14) || (7-ENABLE_LOGGING-7 != 0))

   // Enable SWO
   {
      if ((PWRCTRL->DEVPWRSTATUS_b.PWRSTCRYPTO == 1) && (CRYPTO->HOSTCCISIDLE_b.HOSTCCISIDLE == 1))
   190d6:	4b20      	ldr	r3, [pc, #128]	; (19158 <logging_init+0x88>)
   190d8:	689b      	ldr	r3, [r3, #8]
   190da:	f3c3 5300 	ubfx	r3, r3, #20, #1
   190de:	b2db      	uxtb	r3, r3
   190e0:	2b01      	cmp	r3, #1
   190e2:	d11c      	bne.n	1911e <logging_init+0x4e>
   190e4:	4b1d      	ldr	r3, [pc, #116]	; (1915c <logging_init+0x8c>)
   190e6:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	; 0xa7c
   190ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
   190ee:	b2db      	uxtb	r3, r3
   190f0:	2b01      	cmp	r3, #1
   190f2:	d114      	bne.n	1911e <logging_init+0x4e>
      {
         uint32_t ui32dcuVal;
         am_hal_dcu_get(&ui32dcuVal);
   190f4:	463b      	mov	r3, r7
   190f6:	4618      	mov	r0, r3
   190f8:	f000 fd3a 	bl	19b70 <am_hal_dcu_get>
         if (!(ui32dcuVal & AM_HAL_DCU_CPUTRC_TPIU_SWO) && (am_hal_dcu_update(true, AM_HAL_DCU_CPUTRC_TPIU_SWO) != AM_HAL_STATUS_SUCCESS))
   190fc:	683b      	ldr	r3, [r7, #0]
   190fe:	f003 0310 	and.w	r3, r3, #16
   19102:	2b00      	cmp	r3, #0
   19104:	d110      	bne.n	19128 <logging_init+0x58>
   19106:	2110      	movs	r1, #16
   19108:	2001      	movs	r0, #1
   1910a:	f000 fd79 	bl	19c00 <am_hal_dcu_update>
   1910e:	4603      	mov	r3, r0
   19110:	2b00      	cmp	r3, #0
   19112:	d009      	beq.n	19128 <logging_init+0x58>
            configASSERT0(1);
   19114:	2113      	movs	r1, #19
   19116:	4812      	ldr	r0, [pc, #72]	; (19160 <logging_init+0x90>)
   19118:	f000 f972 	bl	19400 <vAssertCalled>
      {
   1911c:	e004      	b.n	19128 <logging_init+0x58>
      }
      else
         configASSERT0(1);
   1911e:	2116      	movs	r1, #22
   19120:	480f      	ldr	r0, [pc, #60]	; (19160 <logging_init+0x90>)
   19122:	f000 f96d 	bl	19400 <vAssertCalled>
   19126:	e000      	b.n	1912a <logging_init+0x5a>
      {
   19128:	bf00      	nop
   }

   // Enable the ITM interface and the SWO pin
   am_hal_itm_enable();
   1912a:	f000 facf 	bl	196cc <am_hal_itm_enable>
   am_hal_tpiu_enable(AM_HAL_TPIU_BAUD_1M);
   1912e:	480d      	ldr	r0, [pc, #52]	; (19164 <logging_init+0x94>)
   19130:	f000 fc66 	bl	19a00 <am_hal_tpiu_enable>
   am_hal_gpio_pincfg_t swo_pinconfig = g_AM_BSP_GPIO_ITM_SWO;
   19134:	4b0c      	ldr	r3, [pc, #48]	; (19168 <logging_init+0x98>)
   19136:	681b      	ldr	r3, [r3, #0]
   19138:	607b      	str	r3, [r7, #4]
   swo_pinconfig.GP.cfg_b.uFuncSel = PIN_SWO_FUNCTION;
   1913a:	793b      	ldrb	r3, [r7, #4]
   1913c:	f36f 0303 	bfc	r3, #0, #4
   19140:	713b      	strb	r3, [r7, #4]
   am_hal_gpio_pinconfig(PIN_SWO, swo_pinconfig);
   19142:	6879      	ldr	r1, [r7, #4]
   19144:	201c      	movs	r0, #28
   19146:	f000 fdb3 	bl	19cb0 <am_hal_gpio_pinconfig>

   // Attach the ITM to the STDIO driver
   am_util_stdio_printf_init(am_hal_itm_print);
   1914a:	4808      	ldr	r0, [pc, #32]	; (1916c <logging_init+0x9c>)
   1914c:	f7ff f8a8 	bl	182a0 <am_util_stdio_printf_init>
#else

   logging_disable();

#endif
}
   19150:	bf00      	nop
   19152:	3708      	adds	r7, #8
   19154:	46bd      	mov	sp, r7
   19156:	bd80      	pop	{r7, pc}
   19158:	40021000 	.word	0x40021000
   1915c:	400c0000 	.word	0x400c0000
   19160:	0001a7ec 	.word	0x0001a7ec
   19164:	000f4240 	.word	0x000f4240
   19168:	10000000 	.word	0x10000000
   1916c:	00019715 	.word	0x00019715

00019170 <print_reset_reason>:
   // Disconnect the SWO pin
   am_hal_gpio_pinconfig(PIN_SWO, am_hal_gpio_pincfg_disabled);
}

void print_reset_reason(const am_hal_reset_status_t* reason)
{
   19170:	b580      	push	{r7, lr}
   19172:	b082      	sub	sp, #8
   19174:	af00      	add	r7, sp, #0
   19176:	6078      	str	r0, [r7, #4]
   print("\n----------------------------------------\n");
   19178:	4830      	ldr	r0, [pc, #192]	; (1923c <print_reset_reason+0xcc>)
   1917a:	f7ff ff47 	bl	1900c <am_util_stdio_printf>
   print("Reset Reasons: ");
   1917e:	4830      	ldr	r0, [pc, #192]	; (19240 <print_reset_reason+0xd0>)
   19180:	f7ff ff44 	bl	1900c <am_util_stdio_printf>
   if (reason->bEXTStat)
   19184:	687b      	ldr	r3, [r7, #4]
   19186:	789b      	ldrb	r3, [r3, #2]
   19188:	2b00      	cmp	r3, #0
   1918a:	d002      	beq.n	19192 <print_reset_reason+0x22>
      print("External Reset, ");
   1918c:	482d      	ldr	r0, [pc, #180]	; (19244 <print_reset_reason+0xd4>)
   1918e:	f7ff ff3d 	bl	1900c <am_util_stdio_printf>
   if (reason->bPORStat)
   19192:	687b      	ldr	r3, [r7, #4]
   19194:	78db      	ldrb	r3, [r3, #3]
   19196:	2b00      	cmp	r3, #0
   19198:	d002      	beq.n	191a0 <print_reset_reason+0x30>
      print("HW Power-On Reset, ");
   1919a:	482b      	ldr	r0, [pc, #172]	; (19248 <print_reset_reason+0xd8>)
   1919c:	f7ff ff36 	bl	1900c <am_util_stdio_printf>
   if (reason->bBODStat)
   191a0:	687b      	ldr	r3, [r7, #4]
   191a2:	791b      	ldrb	r3, [r3, #4]
   191a4:	2b00      	cmp	r3, #0
   191a6:	d002      	beq.n	191ae <print_reset_reason+0x3e>
      print("Brown-Out Reset, ");
   191a8:	4828      	ldr	r0, [pc, #160]	; (1924c <print_reset_reason+0xdc>)
   191aa:	f7ff ff2f 	bl	1900c <am_util_stdio_printf>
   if (reason->bSWPORStat)
   191ae:	687b      	ldr	r3, [r7, #4]
   191b0:	795b      	ldrb	r3, [r3, #5]
   191b2:	2b00      	cmp	r3, #0
   191b4:	d002      	beq.n	191bc <print_reset_reason+0x4c>
      print("SW Power-On Reset, ");
   191b6:	4826      	ldr	r0, [pc, #152]	; (19250 <print_reset_reason+0xe0>)
   191b8:	f7ff ff28 	bl	1900c <am_util_stdio_printf>
   if (reason->bSWPOIStat)
   191bc:	687b      	ldr	r3, [r7, #4]
   191be:	799b      	ldrb	r3, [r3, #6]
   191c0:	2b00      	cmp	r3, #0
   191c2:	d002      	beq.n	191ca <print_reset_reason+0x5a>
      print("SW Power-On Initialization, ");
   191c4:	4823      	ldr	r0, [pc, #140]	; (19254 <print_reset_reason+0xe4>)
   191c6:	f7ff ff21 	bl	1900c <am_util_stdio_printf>
   if (reason->bDBGRStat)
   191ca:	687b      	ldr	r3, [r7, #4]
   191cc:	79db      	ldrb	r3, [r3, #7]
   191ce:	2b00      	cmp	r3, #0
   191d0:	d002      	beq.n	191d8 <print_reset_reason+0x68>
      print("Debugger Reset, ");
   191d2:	4821      	ldr	r0, [pc, #132]	; (19258 <print_reset_reason+0xe8>)
   191d4:	f7ff ff1a 	bl	1900c <am_util_stdio_printf>
   if (reason->bWDTStat)
   191d8:	687b      	ldr	r3, [r7, #4]
   191da:	7a1b      	ldrb	r3, [r3, #8]
   191dc:	2b00      	cmp	r3, #0
   191de:	d002      	beq.n	191e6 <print_reset_reason+0x76>
      print("Watch Dog Timer Reset, ");
   191e0:	481e      	ldr	r0, [pc, #120]	; (1925c <print_reset_reason+0xec>)
   191e2:	f7ff ff13 	bl	1900c <am_util_stdio_printf>
   if (reason->bBOUnregStat)
   191e6:	687b      	ldr	r3, [r7, #4]
   191e8:	7a5b      	ldrb	r3, [r3, #9]
   191ea:	2b00      	cmp	r3, #0
   191ec:	d002      	beq.n	191f4 <print_reset_reason+0x84>
      print("Unregulated Supply Brownout, ");
   191ee:	481c      	ldr	r0, [pc, #112]	; (19260 <print_reset_reason+0xf0>)
   191f0:	f7ff ff0c 	bl	1900c <am_util_stdio_printf>
   if (reason->bBOCOREStat)
   191f4:	687b      	ldr	r3, [r7, #4]
   191f6:	7a9b      	ldrb	r3, [r3, #10]
   191f8:	2b00      	cmp	r3, #0
   191fa:	d002      	beq.n	19202 <print_reset_reason+0x92>
      print("Core Regulator Brownout, ");
   191fc:	4819      	ldr	r0, [pc, #100]	; (19264 <print_reset_reason+0xf4>)
   191fe:	f7ff ff05 	bl	1900c <am_util_stdio_printf>
   if (reason->bBOMEMStat)
   19202:	687b      	ldr	r3, [r7, #4]
   19204:	7adb      	ldrb	r3, [r3, #11]
   19206:	2b00      	cmp	r3, #0
   19208:	d002      	beq.n	19210 <print_reset_reason+0xa0>
      print("Memory Regulator Brownout, ");
   1920a:	4817      	ldr	r0, [pc, #92]	; (19268 <print_reset_reason+0xf8>)
   1920c:	f7ff fefe 	bl	1900c <am_util_stdio_printf>
   if (reason->bBOHPMEMStat)
   19210:	687b      	ldr	r3, [r7, #4]
   19212:	7b1b      	ldrb	r3, [r3, #12]
   19214:	2b00      	cmp	r3, #0
   19216:	d002      	beq.n	1921e <print_reset_reason+0xae>
      print("High-Power Memory Regulator Brownout, ");
   19218:	4814      	ldr	r0, [pc, #80]	; (1926c <print_reset_reason+0xfc>)
   1921a:	f7ff fef7 	bl	1900c <am_util_stdio_printf>
   if (reason->bBOLPCOREStat)
   1921e:	687b      	ldr	r3, [r7, #4]
   19220:	7b5b      	ldrb	r3, [r3, #13]
   19222:	2b00      	cmp	r3, #0
   19224:	d002      	beq.n	1922c <print_reset_reason+0xbc>
      print("Low-Power Core Regulator Brownout, ");
   19226:	4812      	ldr	r0, [pc, #72]	; (19270 <print_reset_reason+0x100>)
   19228:	f7ff fef0 	bl	1900c <am_util_stdio_printf>
   print("\n");
   1922c:	4811      	ldr	r0, [pc, #68]	; (19274 <print_reset_reason+0x104>)
   1922e:	f7ff feed 	bl	1900c <am_util_stdio_printf>
}
   19232:	bf00      	nop
   19234:	3708      	adds	r7, #8
   19236:	46bd      	mov	sp, r7
   19238:	bd80      	pop	{r7, pc}
   1923a:	bf00      	nop
   1923c:	0001a810 	.word	0x0001a810
   19240:	0001a83c 	.word	0x0001a83c
   19244:	0001a84c 	.word	0x0001a84c
   19248:	0001a860 	.word	0x0001a860
   1924c:	0001a874 	.word	0x0001a874
   19250:	0001a888 	.word	0x0001a888
   19254:	0001a89c 	.word	0x0001a89c
   19258:	0001a8bc 	.word	0x0001a8bc
   1925c:	0001a8d0 	.word	0x0001a8d0
   19260:	0001a8e8 	.word	0x0001a8e8
   19264:	0001a908 	.word	0x0001a908
   19268:	0001a924 	.word	0x0001a924
   1926c:	0001a940 	.word	0x0001a940
   19270:	0001a968 	.word	0x0001a968
   19274:	0001a98c 	.word	0x0001a98c

00019278 <am_gpio0_001f_isr>:
void _getpid(void) {}
void _isatty(void) {}
void _kill(void) {}

void am_gpio0_001f_isr(void)
{
   19278:	b580      	push	{r7, lr}
   1927a:	b082      	sub	sp, #8
   1927c:	af00      	add	r7, sp, #0
   static uint32_t status;
   AM_CRITICAL_BEGIN
   1927e:	f000 fa1d 	bl	196bc <am_hal_interrupt_master_disable>
   19282:	4603      	mov	r3, r0
   19284:	607b      	str	r3, [r7, #4]
   am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, false, &status);
   19286:	4a0c      	ldr	r2, [pc, #48]	; (192b8 <am_gpio0_001f_isr+0x40>)
   19288:	2100      	movs	r1, #0
   1928a:	2038      	movs	r0, #56	; 0x38
   1928c:	f000 fd3c 	bl	19d08 <am_hal_gpio_interrupt_irq_status_get>
   am_hal_gpio_interrupt_irq_clear(GPIO0_001F_IRQn, status);
   19290:	4b09      	ldr	r3, [pc, #36]	; (192b8 <am_gpio0_001f_isr+0x40>)
   19292:	681b      	ldr	r3, [r3, #0]
   19294:	4619      	mov	r1, r3
   19296:	2038      	movs	r0, #56	; 0x38
   19298:	f000 fd70 	bl	19d7c <am_hal_gpio_interrupt_irq_clear>
   AM_CRITICAL_END
   1929c:	687b      	ldr	r3, [r7, #4]
   1929e:	4618      	mov	r0, r3
   192a0:	f000 fa10 	bl	196c4 <am_hal_interrupt_master_set>
   am_hal_gpio_interrupt_service(GPIO0_001F_IRQn, status);
   192a4:	4b04      	ldr	r3, [pc, #16]	; (192b8 <am_gpio0_001f_isr+0x40>)
   192a6:	681b      	ldr	r3, [r3, #0]
   192a8:	4619      	mov	r1, r3
   192aa:	2038      	movs	r0, #56	; 0x38
   192ac:	f000 fd72 	bl	19d94 <am_hal_gpio_interrupt_service>
}
   192b0:	bf00      	nop
   192b2:	3708      	adds	r7, #8
   192b4:	46bd      	mov	sp, r7
   192b6:	bd80      	pop	{r7, pc}
   192b8:	10000424 	.word	0x10000424

000192bc <am_gpio0_203f_isr>:

void am_gpio0_203f_isr(void)
{
   192bc:	b580      	push	{r7, lr}
   192be:	b082      	sub	sp, #8
   192c0:	af00      	add	r7, sp, #0
   static uint32_t status;
   AM_CRITICAL_BEGIN
   192c2:	f000 f9fb 	bl	196bc <am_hal_interrupt_master_disable>
   192c6:	4603      	mov	r3, r0
   192c8:	607b      	str	r3, [r7, #4]
   am_hal_gpio_interrupt_irq_status_get(GPIO0_203F_IRQn, false, &status);
   192ca:	4a0c      	ldr	r2, [pc, #48]	; (192fc <am_gpio0_203f_isr+0x40>)
   192cc:	2100      	movs	r1, #0
   192ce:	2039      	movs	r0, #57	; 0x39
   192d0:	f000 fd1a 	bl	19d08 <am_hal_gpio_interrupt_irq_status_get>
   am_hal_gpio_interrupt_irq_clear(GPIO0_203F_IRQn, status);
   192d4:	4b09      	ldr	r3, [pc, #36]	; (192fc <am_gpio0_203f_isr+0x40>)
   192d6:	681b      	ldr	r3, [r3, #0]
   192d8:	4619      	mov	r1, r3
   192da:	2039      	movs	r0, #57	; 0x39
   192dc:	f000 fd4e 	bl	19d7c <am_hal_gpio_interrupt_irq_clear>
   AM_CRITICAL_END
   192e0:	687b      	ldr	r3, [r7, #4]
   192e2:	4618      	mov	r0, r3
   192e4:	f000 f9ee 	bl	196c4 <am_hal_interrupt_master_set>
   am_hal_gpio_interrupt_service(GPIO0_203F_IRQn, status);
   192e8:	4b04      	ldr	r3, [pc, #16]	; (192fc <am_gpio0_203f_isr+0x40>)
   192ea:	681b      	ldr	r3, [r3, #0]
   192ec:	4619      	mov	r1, r3
   192ee:	2039      	movs	r0, #57	; 0x39
   192f0:	f000 fd50 	bl	19d94 <am_hal_gpio_interrupt_service>
}
   192f4:	bf00      	nop
   192f6:	3708      	adds	r7, #8
   192f8:	46bd      	mov	sp, r7
   192fa:	bd80      	pop	{r7, pc}
   192fc:	10000428 	.word	0x10000428

00019300 <am_gpio0_405f_isr>:

void am_gpio0_405f_isr(void)
{
   19300:	b580      	push	{r7, lr}
   19302:	b082      	sub	sp, #8
   19304:	af00      	add	r7, sp, #0
   static uint32_t status;
   AM_CRITICAL_BEGIN
   19306:	f000 f9d9 	bl	196bc <am_hal_interrupt_master_disable>
   1930a:	4603      	mov	r3, r0
   1930c:	607b      	str	r3, [r7, #4]
   am_hal_gpio_interrupt_irq_status_get(GPIO0_405F_IRQn, false, &status);
   1930e:	4a0c      	ldr	r2, [pc, #48]	; (19340 <am_gpio0_405f_isr+0x40>)
   19310:	2100      	movs	r1, #0
   19312:	203a      	movs	r0, #58	; 0x3a
   19314:	f000 fcf8 	bl	19d08 <am_hal_gpio_interrupt_irq_status_get>
   am_hal_gpio_interrupt_irq_clear(GPIO0_405F_IRQn, status);
   19318:	4b09      	ldr	r3, [pc, #36]	; (19340 <am_gpio0_405f_isr+0x40>)
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	4619      	mov	r1, r3
   1931e:	203a      	movs	r0, #58	; 0x3a
   19320:	f000 fd2c 	bl	19d7c <am_hal_gpio_interrupt_irq_clear>
   AM_CRITICAL_END
   19324:	687b      	ldr	r3, [r7, #4]
   19326:	4618      	mov	r0, r3
   19328:	f000 f9cc 	bl	196c4 <am_hal_interrupt_master_set>
   am_hal_gpio_interrupt_service(GPIO0_405F_IRQn, status);
   1932c:	4b04      	ldr	r3, [pc, #16]	; (19340 <am_gpio0_405f_isr+0x40>)
   1932e:	681b      	ldr	r3, [r3, #0]
   19330:	4619      	mov	r1, r3
   19332:	203a      	movs	r0, #58	; 0x3a
   19334:	f000 fd2e 	bl	19d94 <am_hal_gpio_interrupt_service>
}
   19338:	bf00      	nop
   1933a:	3708      	adds	r7, #8
   1933c:	46bd      	mov	sp, r7
   1933e:	bd80      	pop	{r7, pc}
   19340:	1000042c 	.word	0x1000042c

00019344 <am_gpio0_607f_isr>:

void am_gpio0_607f_isr(void)
{
   19344:	b580      	push	{r7, lr}
   19346:	b082      	sub	sp, #8
   19348:	af00      	add	r7, sp, #0
   static uint32_t status;
   AM_CRITICAL_BEGIN
   1934a:	f000 f9b7 	bl	196bc <am_hal_interrupt_master_disable>
   1934e:	4603      	mov	r3, r0
   19350:	607b      	str	r3, [r7, #4]
   am_hal_gpio_interrupt_irq_status_get(GPIO0_607F_IRQn, false, &status);
   19352:	4a0c      	ldr	r2, [pc, #48]	; (19384 <am_gpio0_607f_isr+0x40>)
   19354:	2100      	movs	r1, #0
   19356:	203b      	movs	r0, #59	; 0x3b
   19358:	f000 fcd6 	bl	19d08 <am_hal_gpio_interrupt_irq_status_get>
   am_hal_gpio_interrupt_irq_clear(GPIO0_607F_IRQn, status);
   1935c:	4b09      	ldr	r3, [pc, #36]	; (19384 <am_gpio0_607f_isr+0x40>)
   1935e:	681b      	ldr	r3, [r3, #0]
   19360:	4619      	mov	r1, r3
   19362:	203b      	movs	r0, #59	; 0x3b
   19364:	f000 fd0a 	bl	19d7c <am_hal_gpio_interrupt_irq_clear>
   AM_CRITICAL_END
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	4618      	mov	r0, r3
   1936c:	f000 f9aa 	bl	196c4 <am_hal_interrupt_master_set>
   am_hal_gpio_interrupt_service(GPIO0_607F_IRQn, status);
   19370:	4b04      	ldr	r3, [pc, #16]	; (19384 <am_gpio0_607f_isr+0x40>)
   19372:	681b      	ldr	r3, [r3, #0]
   19374:	4619      	mov	r1, r3
   19376:	203b      	movs	r0, #59	; 0x3b
   19378:	f000 fd0c 	bl	19d94 <am_hal_gpio_interrupt_service>
}
   1937c:	bf00      	nop
   1937e:	3708      	adds	r7, #8
   19380:	46bd      	mov	sp, r7
   19382:	bd80      	pop	{r7, pc}
   19384:	10000430 	.word	0x10000430

00019388 <am_rtc_isr>:

void am_rtc_isr(void)
{
   19388:	b580      	push	{r7, lr}
   1938a:	b082      	sub	sp, #8
   1938c:	af00      	add	r7, sp, #0
   static am_hal_rtc_alarm_repeat_e repeat_interval;
   AM_CRITICAL_BEGIN
   1938e:	f000 f995 	bl	196bc <am_hal_interrupt_master_disable>
   19392:	4603      	mov	r3, r0
   19394:	607b      	str	r3, [r7, #4]
   am_hal_rtc_alarm_get(NULL, &repeat_interval);
   19396:	4907      	ldr	r1, [pc, #28]	; (193b4 <am_rtc_isr+0x2c>)
   19398:	2000      	movs	r0, #0
   1939a:	f000 fa15 	bl	197c8 <am_hal_rtc_alarm_get>
   am_hal_rtc_interrupt_clear(AM_HAL_RTC_INT_ALM);
   1939e:	2001      	movs	r0, #1
   193a0:	f000 fa86 	bl	198b0 <am_hal_rtc_interrupt_clear>
   AM_CRITICAL_END
   193a4:	687b      	ldr	r3, [r7, #4]
   193a6:	4618      	mov	r0, r3
   193a8:	f000 f98c 	bl	196c4 <am_hal_interrupt_master_set>
}
   193ac:	bf00      	nop
   193ae:	3708      	adds	r7, #8
   193b0:	46bd      	mov	sp, r7
   193b2:	bd80      	pop	{r7, pc}
   193b4:	10000434 	.word	0x10000434

000193b8 <system_hard_fault_handler>:
      "mrsne r0, psp \n"                         \
      "b system_hard_fault_handler \n"           )

__attribute__((optimize("O0")))
void system_hard_fault_handler(sContextStateFrame *frame)
{
   193b8:	b480      	push	{r7}
   193ba:	b083      	sub	sp, #12
   193bc:	af00      	add	r7, sp, #0
   193be:	6078      	str	r0, [r7, #4]
#ifdef DEBUGGING
   do {
      if (CoreDebug->DHCSR & (1 << 0))
   193c0:	4b06      	ldr	r3, [pc, #24]	; (193dc <system_hard_fault_handler+0x24>)
   193c2:	681b      	ldr	r3, [r3, #0]
   193c4:	f003 0301 	and.w	r3, r3, #1
   193c8:	2b00      	cmp	r3, #0
   193ca:	d000      	beq.n	193ce <system_hard_fault_handler+0x16>
         __asm("bkpt 1");
   193cc:	be01      	bkpt	0x0001
   } while (0);
#else
   NVIC_SystemReset();
   while (true) {}
#endif
}
   193ce:	bf00      	nop
   193d0:	370c      	adds	r7, #12
   193d2:	46bd      	mov	sp, r7
   193d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   193d8:	4770      	bx	lr
   193da:	bf00      	nop
   193dc:	e000edf0 	.word	0xe000edf0

000193e0 <HardFault_Handler>:

void HardFault_Handler(void) { HARDFAULT_HANDLING_ASM(); }
   193e0:	b480      	push	{r7}
   193e2:	af00      	add	r7, sp, #0
   193e4:	f01e 0f04 	tst.w	lr, #4
   193e8:	bf0c      	ite	eq
   193ea:	f3ef 8008 	mrseq	r0, MSP
   193ee:	f3ef 8009 	mrsne	r0, PSP
   193f2:	f7ff bfe1 	b.w	193b8 <system_hard_fault_handler>
   193f6:	bf00      	nop
   193f8:	46bd      	mov	sp, r7
   193fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   193fe:	4770      	bx	lr

00019400 <vAssertCalled>:

void vAssertCalled(const char * const pcFileName, unsigned long ulLine)
{
   19400:	b480      	push	{r7}
   19402:	b085      	sub	sp, #20
   19404:	af00      	add	r7, sp, #0
   19406:	6078      	str	r0, [r7, #4]
   19408:	6039      	str	r1, [r7, #0]
   volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
   1940a:	2300      	movs	r3, #0
   1940c:	60fb      	str	r3, [r7, #12]
   while (ulSetToNonZeroInDebuggerToContinue == 0);
   1940e:	bf00      	nop
   19410:	68fb      	ldr	r3, [r7, #12]
   19412:	2b00      	cmp	r3, #0
   19414:	d0fc      	beq.n	19410 <vAssertCalled+0x10>
}
   19416:	bf00      	nop
   19418:	bf00      	nop
   1941a:	3714      	adds	r7, #20
   1941c:	46bd      	mov	sp, r7
   1941e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19422:	4770      	bx	lr

00019424 <setup_hardware>:


// Public API Functions ------------------------------------------------------------------------------------------------

void setup_hardware(void)
{
   19424:	b580      	push	{r7, lr}
   19426:	b08a      	sub	sp, #40	; 0x28
   19428:	af00      	add	r7, sp, #0
   // Read the hardware reset reason
   am_hal_reset_status_t reset_reason;
   am_hal_reset_status_get(&reset_reason);
   1942a:	f107 0318 	add.w	r3, r7, #24
   1942e:	4618      	mov	r0, r3
   19430:	f000 f988 	bl	19744 <am_hal_reset_status_get>

   // Enable the floating point module
   am_hal_sysctrl_fpu_enable();
   19434:	f000 fac2 	bl	199bc <am_hal_sysctrl_fpu_enable>
   am_hal_sysctrl_fpu_stacking_enable(true);
   19438:	2001      	movs	r0, #1
   1943a:	f000 fac7 	bl	199cc <am_hal_sysctrl_fpu_stacking_enable>

   // Configure the board to operate in low-power mode
   am_hal_pwrctrl_low_power_init();
   1943e:	f000 ff8f 	bl	1a360 <am_hal_pwrctrl_low_power_init>
   am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_SIMOBUCK_INIT, NULL);
   19442:	2100      	movs	r1, #0
   19444:	2000      	movs	r0, #0
   19446:	f001 f865 	bl	1a514 <am_hal_pwrctrl_control>

   // Configure only the necessary memory
   am_hal_pwrctrl_dsp_memory_config_t dsp_mem_config =
   1944a:	f107 0310 	add.w	r3, r7, #16
   1944e:	2200      	movs	r2, #0
   19450:	601a      	str	r2, [r3, #0]
   19452:	711a      	strb	r2, [r3, #4]
      .bRetainCache = false,
      .bEnableRAM = false,
      .bActiveRAM = false,
      .bRetainRAM = false
   };
   am_hal_pwrctrl_mcu_memory_config_t mcu_mem_config =
   19454:	4a16      	ldr	r2, [pc, #88]	; (194b0 <setup_hardware+0x8c>)
   19456:	f107 0308 	add.w	r3, r7, #8
   1945a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1945e:	6018      	str	r0, [r3, #0]
   19460:	3304      	adds	r3, #4
   19462:	8019      	strh	r1, [r3, #0]
      .eDTCMCfg     = AM_HAL_PWRCTRL_DTCM_384K,
      .eRetainDTCM  = AM_HAL_PWRCTRL_DTCM_384K,
      .bEnableNVM0  = true,
      .bRetainNVM0  = false
   };
   am_hal_pwrctrl_sram_memcfg_t sram_mem_config =
   19464:	463b      	mov	r3, r7
   19466:	2200      	movs	r2, #0
   19468:	601a      	str	r2, [r3, #0]
   1946a:	809a      	strh	r2, [r3, #4]
      .eActiveWithGFX     = AM_HAL_PWRCTRL_SRAM_NONE,
      .eActiveWithDISP    = AM_HAL_PWRCTRL_SRAM_NONE,
      .eActiveWithDSP     = AM_HAL_PWRCTRL_SRAM_NONE,
      .eSRAMRetain        = AM_HAL_PWRCTRL_SRAM_NONE
   };
   am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &dsp_mem_config);
   1946c:	f107 0310 	add.w	r3, r7, #16
   19470:	4619      	mov	r1, r3
   19472:	2000      	movs	r0, #0
   19474:	f000 fdcc 	bl	1a010 <am_hal_pwrctrl_dsp_memory_config>
   am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP1, &dsp_mem_config);
   19478:	f107 0310 	add.w	r3, r7, #16
   1947c:	4619      	mov	r1, r3
   1947e:	2001      	movs	r0, #1
   19480:	f000 fdc6 	bl	1a010 <am_hal_pwrctrl_dsp_memory_config>
   am_hal_pwrctrl_mcu_memory_config(&mcu_mem_config);
   19484:	f107 0308 	add.w	r3, r7, #8
   19488:	4618      	mov	r0, r3
   1948a:	f000 fcbb 	bl	19e04 <am_hal_pwrctrl_mcu_memory_config>
   am_hal_pwrctrl_sram_config(&sram_mem_config);
   1948e:	463b      	mov	r3, r7
   19490:	4618      	mov	r0, r3
   19492:	f000 fd65 	bl	19f60 <am_hal_pwrctrl_sram_config>
   am_hal_cachectrl_disable();
   19496:	f000 f83b 	bl	19510 <am_hal_cachectrl_disable>

   // Set up printing to the console
   logging_init();
   1949a:	f7ff fe19 	bl	190d0 <logging_init>
   print_reset_reason(&reset_reason);
   1949e:	f107 0318 	add.w	r3, r7, #24
   194a2:	4618      	mov	r0, r3
   194a4:	f7ff fe64 	bl	19170 <print_reset_reason>
}
   194a8:	bf00      	nop
   194aa:	3728      	adds	r7, #40	; 0x28
   194ac:	46bd      	mov	sp, r7
   194ae:	bd80      	pop	{r7, pc}
   194b0:	0001a990 	.word	0x0001a990

000194b4 <system_enable_interrupts>:
{
   am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOR, NULL);
}

void system_enable_interrupts(bool enabled)
{
   194b4:	b580      	push	{r7, lr}
   194b6:	b082      	sub	sp, #8
   194b8:	af00      	add	r7, sp, #0
   194ba:	4603      	mov	r3, r0
   194bc:	71fb      	strb	r3, [r7, #7]
   // Enable or disable all system interrupts
   if (enabled)
   194be:	79fb      	ldrb	r3, [r7, #7]
   194c0:	2b00      	cmp	r3, #0
   194c2:	d002      	beq.n	194ca <system_enable_interrupts+0x16>
      am_hal_interrupt_master_enable();
   194c4:	f000 f8f6 	bl	196b4 <am_hal_interrupt_master_enable>
   else
      am_hal_interrupt_master_disable();
}
   194c8:	e001      	b.n	194ce <system_enable_interrupts+0x1a>
      am_hal_interrupt_master_disable();
   194ca:	f000 f8f7 	bl	196bc <am_hal_interrupt_master_disable>
}
   194ce:	bf00      	nop
   194d0:	3708      	adds	r7, #8
   194d2:	46bd      	mov	sp, r7
   194d4:	bd80      	pop	{r7, pc}

000194d6 <system_enter_deep_sleep_mode>:

void system_enter_deep_sleep_mode(void)
{
   194d6:	b580      	push	{r7, lr}
   194d8:	af00      	add	r7, sp, #0
   // Enable interrupts and enter Deep Sleep mode
   am_hal_interrupt_master_enable();
   194da:	f000 f8eb 	bl	196b4 <am_hal_interrupt_master_enable>
   am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   194de:	2001      	movs	r0, #1
   194e0:	f000 f9ee 	bl	198c0 <am_hal_sysctrl_sleep>
}
   194e4:	bf00      	nop
   194e6:	bd80      	pop	{r7, pc}

000194e8 <main>:
#include "logging.h"
#include "system.h"

int main(void)
{
   194e8:	b580      	push	{r7, lr}
   194ea:	af00      	add	r7, sp, #0
   // Set up the system hardware
   setup_hardware();
   194ec:	f7ff ff9a 	bl	19424 <setup_hardware>

   // Initialize needed peripherals
   system_enable_interrupts(true);
   194f0:	2001      	movs	r0, #1
   194f2:	f7ff ffdf 	bl	194b4 <system_enable_interrupts>

   // Loop forever
   while (true)
   {
      // Sleep until woken by an interrupt
      print("Going to sleep...\n");
   194f6:	4804      	ldr	r0, [pc, #16]	; (19508 <main+0x20>)
   194f8:	f7ff fd88 	bl	1900c <am_util_stdio_printf>
      system_enter_deep_sleep_mode();
   194fc:	f7ff ffeb 	bl	194d6 <system_enter_deep_sleep_mode>
      print("Woke up!\n");
   19500:	4802      	ldr	r0, [pc, #8]	; (1950c <main+0x24>)
   19502:	f7ff fd83 	bl	1900c <am_util_stdio_printf>
      print("Going to sleep...\n");
   19506:	e7f6      	b.n	194f6 <main+0xe>
   19508:	0001a998 	.word	0x0001a998
   1950c:	0001a9ac 	.word	0x0001a9ac

00019510 <am_hal_cachectrl_disable>:
   19510:	b500      	push	{lr}
   19512:	b083      	sub	sp, #12
   19514:	f000 f8d2 	bl	196bc <am_hal_interrupt_master_disable>
   19518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   1951c:	9001      	str	r0, [sp, #4]
   1951e:	681a      	ldr	r2, [r3, #0]
   19520:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   19524:	601a      	str	r2, [r3, #0]
   19526:	681a      	ldr	r2, [r3, #0]
   19528:	f022 0201 	bic.w	r2, r2, #1
   1952c:	601a      	str	r2, [r3, #0]
   1952e:	9801      	ldr	r0, [sp, #4]
   19530:	f000 f8c8 	bl	196c4 <am_hal_interrupt_master_set>
   19534:	2000      	movs	r0, #0
   19536:	b003      	add	sp, #12
   19538:	f85d fb04 	ldr.w	pc, [sp], #4

0001953c <am_hal_daxi_config>:
   1953c:	b530      	push	{r4, r5, lr}
   1953e:	b083      	sub	sp, #12
   19540:	4605      	mov	r5, r0
   19542:	f000 f8bb 	bl	196bc <am_hal_interrupt_master_disable>
   19546:	9000      	str	r0, [sp, #0]
   19548:	f000 f8b8 	bl	196bc <am_hal_interrupt_master_disable>
   1954c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   19550:	9001      	str	r0, [sp, #4]
   19552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   19554:	0752      	lsls	r2, r2, #29
   19556:	d40c      	bmi.n	19572 <am_hal_daxi_config+0x36>
   19558:	f3bf 8f4f 	dsb	sy
   1955c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1955e:	491a      	ldr	r1, [pc, #104]	; (195c8 <am_hal_daxi_config+0x8c>)
   19560:	f042 0201 	orr.w	r2, r2, #1
   19564:	655a      	str	r2, [r3, #84]	; 0x54
   19566:	680a      	ldr	r2, [r1, #0]
   19568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1956a:	f042 0202 	orr.w	r2, r2, #2
   1956e:	655a      	str	r2, [r3, #84]	; 0x54
   19570:	680b      	ldr	r3, [r1, #0]
   19572:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
   19576:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19578:	075b      	lsls	r3, r3, #29
   1957a:	d5fc      	bpl.n	19576 <am_hal_daxi_config+0x3a>
   1957c:	9801      	ldr	r0, [sp, #4]
   1957e:	f000 f8a1 	bl	196c4 <am_hal_interrupt_master_set>
   19582:	b1ed      	cbz	r5, 195c0 <am_hal_daxi_config+0x84>
   19584:	792b      	ldrb	r3, [r5, #4]
   19586:	78ea      	ldrb	r2, [r5, #3]
   19588:	7869      	ldrb	r1, [r5, #1]
   1958a:	6828      	ldr	r0, [r5, #0]
   1958c:	f003 0301 	and.w	r3, r3, #1
   19590:	0212      	lsls	r2, r2, #8
   19592:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   19596:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   1959a:	4313      	orrs	r3, r2
   1959c:	78aa      	ldrb	r2, [r5, #2]
   1959e:	490b      	ldr	r1, [pc, #44]	; (195cc <am_hal_daxi_config+0x90>)
   195a0:	0412      	lsls	r2, r2, #16
   195a2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
   195a6:	4313      	orrs	r3, r2
   195a8:	6523      	str	r3, [r4, #80]	; 0x50
   195aa:	6008      	str	r0, [r1, #0]
   195ac:	792b      	ldrb	r3, [r5, #4]
   195ae:	710b      	strb	r3, [r1, #4]
   195b0:	4b05      	ldr	r3, [pc, #20]	; (195c8 <am_hal_daxi_config+0x8c>)
   195b2:	681b      	ldr	r3, [r3, #0]
   195b4:	9800      	ldr	r0, [sp, #0]
   195b6:	f000 f885 	bl	196c4 <am_hal_interrupt_master_set>
   195ba:	2000      	movs	r0, #0
   195bc:	b003      	add	sp, #12
   195be:	bd30      	pop	{r4, r5, pc}
   195c0:	2306      	movs	r3, #6
   195c2:	6523      	str	r3, [r4, #80]	; 0x50
   195c4:	e7f4      	b.n	195b0 <am_hal_daxi_config+0x74>
   195c6:	bf00      	nop
   195c8:	47ff0000 	.word	0x47ff0000
   195cc:	10000004 	.word	0x10000004

000195d0 <am_hal_daxi_control>:
   195d0:	b510      	push	{r4, lr}
   195d2:	b084      	sub	sp, #16
   195d4:	2803      	cmp	r0, #3
   195d6:	d866      	bhi.n	196a6 <am_hal_daxi_control+0xd6>
   195d8:	e8df f000 	tbb	[pc, r0]
   195dc:	02083252 	.word	0x02083252
   195e0:	4832      	ldr	r0, [pc, #200]	; (196ac <am_hal_daxi_control+0xdc>)
   195e2:	f7ff ffab 	bl	1953c <am_hal_daxi_config>
   195e6:	2000      	movs	r0, #0
   195e8:	b004      	add	sp, #16
   195ea:	bd10      	pop	{r4, pc}
   195ec:	f000 f866 	bl	196bc <am_hal_interrupt_master_disable>
   195f0:	9002      	str	r0, [sp, #8]
   195f2:	f000 f863 	bl	196bc <am_hal_interrupt_master_disable>
   195f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   195fa:	9003      	str	r0, [sp, #12]
   195fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   195fe:	0752      	lsls	r2, r2, #29
   19600:	d40c      	bmi.n	1961c <am_hal_daxi_control+0x4c>
   19602:	f3bf 8f4f 	dsb	sy
   19606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19608:	4929      	ldr	r1, [pc, #164]	; (196b0 <am_hal_daxi_control+0xe0>)
   1960a:	f042 0201 	orr.w	r2, r2, #1
   1960e:	655a      	str	r2, [r3, #84]	; 0x54
   19610:	680a      	ldr	r2, [r1, #0]
   19612:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19614:	f042 0202 	orr.w	r2, r2, #2
   19618:	655a      	str	r2, [r3, #84]	; 0x54
   1961a:	680b      	ldr	r3, [r1, #0]
   1961c:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
   19620:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19622:	075b      	lsls	r3, r3, #29
   19624:	d5fc      	bpl.n	19620 <am_hal_daxi_control+0x50>
   19626:	9803      	ldr	r0, [sp, #12]
   19628:	f000 f84c 	bl	196c4 <am_hal_interrupt_master_set>
   1962c:	2206      	movs	r2, #6
   1962e:	4b20      	ldr	r3, [pc, #128]	; (196b0 <am_hal_daxi_control+0xe0>)
   19630:	6522      	str	r2, [r4, #80]	; 0x50
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	9802      	ldr	r0, [sp, #8]
   19636:	f000 f845 	bl	196c4 <am_hal_interrupt_master_set>
   1963a:	2000      	movs	r0, #0
   1963c:	b004      	add	sp, #16
   1963e:	bd10      	pop	{r4, pc}
   19640:	f000 f83c 	bl	196bc <am_hal_interrupt_master_disable>
   19644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   19648:	9001      	str	r0, [sp, #4]
   1964a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1964c:	0754      	lsls	r4, r2, #29
   1964e:	d40c      	bmi.n	1966a <am_hal_daxi_control+0x9a>
   19650:	f3bf 8f4f 	dsb	sy
   19654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19656:	4916      	ldr	r1, [pc, #88]	; (196b0 <am_hal_daxi_control+0xe0>)
   19658:	f042 0201 	orr.w	r2, r2, #1
   1965c:	655a      	str	r2, [r3, #84]	; 0x54
   1965e:	680a      	ldr	r2, [r1, #0]
   19660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19662:	f042 0202 	orr.w	r2, r2, #2
   19666:	655a      	str	r2, [r3, #84]	; 0x54
   19668:	680b      	ldr	r3, [r1, #0]
   1966a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
   1966e:	6d53      	ldr	r3, [r2, #84]	; 0x54
   19670:	0758      	lsls	r0, r3, #29
   19672:	d5fc      	bpl.n	1966e <am_hal_daxi_control+0x9e>
   19674:	9801      	ldr	r0, [sp, #4]
   19676:	f000 f825 	bl	196c4 <am_hal_interrupt_master_set>
   1967a:	2000      	movs	r0, #0
   1967c:	b004      	add	sp, #16
   1967e:	bd10      	pop	{r4, pc}
   19680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   19684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   19686:	0751      	lsls	r1, r2, #29
   19688:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1968c:	d409      	bmi.n	196a2 <am_hal_daxi_control+0xd2>
   1968e:	f3bf 8f4f 	dsb	sy
   19692:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19694:	4906      	ldr	r1, [pc, #24]	; (196b0 <am_hal_daxi_control+0xe0>)
   19696:	f042 0202 	orr.w	r2, r2, #2
   1969a:	655a      	str	r2, [r3, #84]	; 0x54
   1969c:	680b      	ldr	r3, [r1, #0]
   1969e:	b004      	add	sp, #16
   196a0:	bd10      	pop	{r4, pc}
   196a2:	2000      	movs	r0, #0
   196a4:	e7a0      	b.n	195e8 <am_hal_daxi_control+0x18>
   196a6:	2006      	movs	r0, #6
   196a8:	e79e      	b.n	195e8 <am_hal_daxi_control+0x18>
   196aa:	bf00      	nop
   196ac:	10000004 	.word	0x10000004
   196b0:	47ff0000 	.word	0x47ff0000

000196b4 <am_hal_interrupt_master_enable>:
   196b4:	f3ef 8010 	mrs	r0, PRIMASK
   196b8:	b662      	cpsie	i
   196ba:	4770      	bx	lr

000196bc <am_hal_interrupt_master_disable>:
   196bc:	f3ef 8010 	mrs	r0, PRIMASK
   196c0:	b672      	cpsid	i
   196c2:	4770      	bx	lr

000196c4 <am_hal_interrupt_master_set>:
   196c4:	f380 8810 	msr	PRIMASK, r0
   196c8:	4770      	bx	lr
   196ca:	bf00      	nop

000196cc <am_hal_itm_enable>:
   196cc:	4a0e      	ldr	r2, [pc, #56]	; (19708 <am_hal_itm_enable+0x3c>)
   196ce:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   196d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   196d6:	b410      	push	{r4}
   196d8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   196dc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   196e0:	01db      	lsls	r3, r3, #7
   196e2:	d5fb      	bpl.n	196dc <am_hal_itm_enable+0x10>
   196e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   196e8:	4c08      	ldr	r4, [pc, #32]	; (1970c <am_hal_itm_enable+0x40>)
   196ea:	4a09      	ldr	r2, [pc, #36]	; (19710 <am_hal_itm_enable+0x44>)
   196ec:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   196f0:	200f      	movs	r0, #15
   196f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   196f6:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   196fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   196fe:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   19702:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   19706:	4770      	bx	lr
   19708:	e000ed00 	.word	0xe000ed00
   1970c:	c5acce55 	.word	0xc5acce55
   19710:	00150511 	.word	0x00150511

00019714 <am_hal_itm_print>:
   19714:	7803      	ldrb	r3, [r0, #0]
   19716:	b1a3      	cbz	r3, 19742 <am_hal_itm_print+0x2e>
   19718:	4603      	mov	r3, r0
   1971a:	f1c0 0c01 	rsb	ip, r0, #1
   1971e:	eb0c 0103 	add.w	r1, ip, r3
   19722:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19726:	2a00      	cmp	r2, #0
   19728:	d1f9      	bne.n	1971e <am_hal_itm_print+0xa>
   1972a:	4401      	add	r1, r0
   1972c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   19730:	f810 cb01 	ldrb.w	ip, [r0], #1
   19734:	6813      	ldr	r3, [r2, #0]
   19736:	2b00      	cmp	r3, #0
   19738:	d0fc      	beq.n	19734 <am_hal_itm_print+0x20>
   1973a:	4288      	cmp	r0, r1
   1973c:	f882 c000 	strb.w	ip, [r2]
   19740:	d1f6      	bne.n	19730 <am_hal_itm_print+0x1c>
   19742:	4770      	bx	lr

00019744 <am_hal_reset_status_get>:
   19744:	b3c0      	cbz	r0, 197b8 <am_hal_reset_status_get+0x74>
   19746:	491e      	ldr	r1, [pc, #120]	; (197c0 <am_hal_reset_status_get+0x7c>)
   19748:	680b      	ldr	r3, [r1, #0]
   1974a:	b38b      	cbz	r3, 197b0 <am_hal_reset_status_get+0x6c>
   1974c:	f3c3 020a 	ubfx	r2, r3, #0, #11
   19750:	f002 0c01 	and.w	ip, r2, #1
   19754:	600a      	str	r2, [r1, #0]
   19756:	f880 c002 	strb.w	ip, [r0, #2]
   1975a:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1975e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   19762:	f880 c003 	strb.w	ip, [r0, #3]
   19766:	7101      	strb	r1, [r0, #4]
   19768:	f3c3 0cc0 	ubfx	ip, r3, #3, #1
   1976c:	f3c3 1100 	ubfx	r1, r3, #4, #1
   19770:	f880 c005 	strb.w	ip, [r0, #5]
   19774:	7181      	strb	r1, [r0, #6]
   19776:	f3c3 1c40 	ubfx	ip, r3, #5, #1
   1977a:	f3c3 1180 	ubfx	r1, r3, #6, #1
   1977e:	8002      	strh	r2, [r0, #0]
   19780:	f880 c007 	strb.w	ip, [r0, #7]
   19784:	7201      	strb	r1, [r0, #8]
   19786:	f3c3 1cc0 	ubfx	ip, r3, #7, #1
   1978a:	f3c3 2100 	ubfx	r1, r3, #8, #1
   1978e:	fab2 f282 	clz	r2, r2
   19792:	f880 c009 	strb.w	ip, [r0, #9]
   19796:	7281      	strb	r1, [r0, #10]
   19798:	f3c3 2c40 	ubfx	ip, r3, #9, #1
   1979c:	2100      	movs	r1, #0
   1979e:	f3c3 2380 	ubfx	r3, r3, #10, #1
   197a2:	0952      	lsrs	r2, r2, #5
   197a4:	f880 c00b 	strb.w	ip, [r0, #11]
   197a8:	7303      	strb	r3, [r0, #12]
   197aa:	7341      	strb	r1, [r0, #13]
   197ac:	4610      	mov	r0, r2
   197ae:	4770      	bx	lr
   197b0:	4b04      	ldr	r3, [pc, #16]	; (197c4 <am_hal_reset_status_get+0x80>)
   197b2:	f8d3 385c 	ldr.w	r3, [r3, #2140]	; 0x85c
   197b6:	e7c9      	b.n	1974c <am_hal_reset_status_get+0x8>
   197b8:	2206      	movs	r2, #6
   197ba:	4610      	mov	r0, r2
   197bc:	4770      	bx	lr
   197be:	bf00      	nop
   197c0:	10000438 	.word	0x10000438
   197c4:	40008000 	.word	0x40008000

000197c8 <am_hal_rtc_alarm_get>:
   197c8:	4a38      	ldr	r2, [pc, #224]	; (198ac <am_hal_rtc_alarm_get+0xe4>)
   197ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   197cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
   197ce:	2800      	cmp	r0, #0
   197d0:	d049      	beq.n	19866 <am_hal_rtc_alarm_get+0x9e>
   197d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   197d4:	f3c3 7601 	ubfx	r6, r3, #28, #2
   197d8:	f3c3 6703 	ubfx	r7, r3, #24, #4
   197dc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   197e0:	f3c3 1403 	ubfx	r4, r3, #4, #4
   197e4:	f3c3 3e02 	ubfx	lr, r3, #12, #3
   197e8:	eb07 0646 	add.w	r6, r7, r6, lsl #1
   197ec:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   197f0:	f3c3 5502 	ubfx	r5, r3, #20, #3
   197f4:	f003 040f 	and.w	r4, r3, #15
   197f8:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
   197fc:	61c6      	str	r6, [r0, #28]
   197fe:	f3c3 4603 	ubfx	r6, r3, #16, #4
   19802:	f3c3 2303 	ubfx	r3, r3, #8, #4
   19806:	eb04 044c 	add.w	r4, r4, ip, lsl #1
   1980a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
   1980e:	f3c2 3c00 	ubfx	ip, r2, #12, #1
   19812:	b2e4      	uxtb	r4, r4
   19814:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   19818:	6243      	str	r3, [r0, #36]	; 0x24
   1981a:	f3c2 2303 	ubfx	r3, r2, #8, #4
   1981e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
   19822:	6284      	str	r4, [r0, #40]	; 0x28
   19824:	f3c2 1401 	ubfx	r4, r2, #4, #2
   19828:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1982c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   19830:	6143      	str	r3, [r0, #20]
   19832:	f002 030f 	and.w	r3, r2, #15
   19836:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   1983a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   1983e:	2300      	movs	r3, #0
   19840:	f3c2 4202 	ubfx	r2, r2, #16, #3
   19844:	e9c0 3300 	strd	r3, r3, [r0]
   19848:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1984c:	6205      	str	r5, [r0, #32]
   1984e:	6082      	str	r2, [r0, #8]
   19850:	6184      	str	r4, [r0, #24]
   19852:	b131      	cbz	r1, 19862 <am_hal_rtc_alarm_get+0x9a>
   19854:	4a15      	ldr	r2, [pc, #84]	; (198ac <am_hal_rtc_alarm_get+0xe4>)
   19856:	6813      	ldr	r3, [r2, #0]
   19858:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1985c:	2b07      	cmp	r3, #7
   1985e:	d00c      	beq.n	1987a <am_hal_rtc_alarm_get+0xb2>
   19860:	700b      	strb	r3, [r1, #0]
   19862:	2000      	movs	r0, #0
   19864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19866:	b131      	cbz	r1, 19876 <am_hal_rtc_alarm_get+0xae>
   19868:	4a10      	ldr	r2, [pc, #64]	; (198ac <am_hal_rtc_alarm_get+0xe4>)
   1986a:	6813      	ldr	r3, [r2, #0]
   1986c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   19870:	2b07      	cmp	r3, #7
   19872:	d00c      	beq.n	1988e <am_hal_rtc_alarm_get+0xc6>
   19874:	700b      	strb	r3, [r1, #0]
   19876:	2000      	movs	r0, #0
   19878:	4770      	bx	lr
   1987a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1987c:	b2db      	uxtb	r3, r3
   1987e:	2bf0      	cmp	r3, #240	; 0xf0
   19880:	d00e      	beq.n	198a0 <am_hal_rtc_alarm_get+0xd8>
   19882:	2bff      	cmp	r3, #255	; 0xff
   19884:	bf0c      	ite	eq
   19886:	2309      	moveq	r3, #9
   19888:	2307      	movne	r3, #7
   1988a:	700b      	strb	r3, [r1, #0]
   1988c:	e7e9      	b.n	19862 <am_hal_rtc_alarm_get+0x9a>
   1988e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   19890:	b2db      	uxtb	r3, r3
   19892:	2bf0      	cmp	r3, #240	; 0xf0
   19894:	d007      	beq.n	198a6 <am_hal_rtc_alarm_get+0xde>
   19896:	2bff      	cmp	r3, #255	; 0xff
   19898:	bf0c      	ite	eq
   1989a:	2309      	moveq	r3, #9
   1989c:	2307      	movne	r3, #7
   1989e:	e7e9      	b.n	19874 <am_hal_rtc_alarm_get+0xac>
   198a0:	2308      	movs	r3, #8
   198a2:	700b      	strb	r3, [r1, #0]
   198a4:	e7dd      	b.n	19862 <am_hal_rtc_alarm_get+0x9a>
   198a6:	2308      	movs	r3, #8
   198a8:	e7e4      	b.n	19874 <am_hal_rtc_alarm_get+0xac>
   198aa:	bf00      	nop
   198ac:	40004800 	.word	0x40004800

000198b0 <am_hal_rtc_interrupt_clear>:
   198b0:	4b02      	ldr	r3, [pc, #8]	; (198bc <am_hal_rtc_interrupt_clear+0xc>)
   198b2:	f8c3 0208 	str.w	r0, [r3, #520]	; 0x208
   198b6:	2000      	movs	r0, #0
   198b8:	4770      	bx	lr
   198ba:	bf00      	nop
   198bc:	40004800 	.word	0x40004800

000198c0 <am_hal_sysctrl_sleep>:
   198c0:	b530      	push	{r4, r5, lr}
   198c2:	b083      	sub	sp, #12
   198c4:	f10d 4370 	add.w	r3, sp, #4026531840	; 0xf0000000
   198c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   198cc:	d300      	bcc.n	198d0 <am_hal_sysctrl_sleep+0x10>
   198ce:	e7fe      	b.n	198ce <am_hal_sysctrl_sleep+0xe>
   198d0:	4604      	mov	r4, r0
   198d2:	f7ff fef3 	bl	196bc <am_hal_interrupt_master_disable>
   198d6:	4935      	ldr	r1, [pc, #212]	; (199ac <am_hal_sysctrl_sleep+0xec>)
   198d8:	9001      	str	r0, [sp, #4]
   198da:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
   198de:	f3c3 1301 	ubfx	r3, r3, #4, #2
   198e2:	b384      	cbz	r4, 19946 <am_hal_sysctrl_sleep+0x86>
   198e4:	4a32      	ldr	r2, [pc, #200]	; (199b0 <am_hal_sysctrl_sleep+0xf0>)
   198e6:	f8d2 5250 	ldr.w	r5, [r2, #592]	; 0x250
   198ea:	f015 0501 	ands.w	r5, r5, #1
   198ee:	d12a      	bne.n	19946 <am_hal_sysctrl_sleep+0x86>
   198f0:	2b03      	cmp	r3, #3
   198f2:	d03a      	beq.n	1996a <am_hal_sysctrl_sleep+0xaa>
   198f4:	4a2f      	ldr	r2, [pc, #188]	; (199b4 <am_hal_sysctrl_sleep+0xf4>)
   198f6:	6913      	ldr	r3, [r2, #16]
   198f8:	f043 0304 	orr.w	r3, r3, #4
   198fc:	2100      	movs	r1, #0
   198fe:	6113      	str	r3, [r2, #16]
   19900:	2001      	movs	r0, #1
   19902:	f7ff fe65 	bl	195d0 <am_hal_daxi_control>
   19906:	bf30      	wfi
   19908:	f3bf 8f6f 	isb	sy
   1990c:	b33d      	cbz	r5, 1995e <am_hal_sysctrl_sleep+0x9e>
   1990e:	2001      	movs	r0, #1
   19910:	f000 fdf0 	bl	1a4f4 <buck_ldo_update_override>
   19914:	4b26      	ldr	r3, [pc, #152]	; (199b0 <am_hal_sysctrl_sleep+0xf0>)
   19916:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   1991a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1991e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   19922:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   19926:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   1992a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   1992e:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   19932:	f36f 5219 	bfc	r2, #20, #6
   19936:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
   1993a:	9801      	ldr	r0, [sp, #4]
   1993c:	b003      	add	sp, #12
   1993e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19942:	f7ff bebf 	b.w	196c4 <am_hal_interrupt_master_set>
   19946:	4a1b      	ldr	r2, [pc, #108]	; (199b4 <am_hal_sysctrl_sleep+0xf4>)
   19948:	6913      	ldr	r3, [r2, #16]
   1994a:	f023 0304 	bic.w	r3, r3, #4
   1994e:	2100      	movs	r1, #0
   19950:	6113      	str	r3, [r2, #16]
   19952:	2001      	movs	r0, #1
   19954:	f7ff fe3c 	bl	195d0 <am_hal_daxi_control>
   19958:	bf30      	wfi
   1995a:	f3bf 8f6f 	isb	sy
   1995e:	9801      	ldr	r0, [sp, #4]
   19960:	b003      	add	sp, #12
   19962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19966:	f7ff bead 	b.w	196c4 <am_hal_interrupt_master_set>
   1996a:	690b      	ldr	r3, [r1, #16]
   1996c:	055b      	lsls	r3, r3, #21
   1996e:	d4c1      	bmi.n	198f4 <am_hal_sysctrl_sleep+0x34>
   19970:	688b      	ldr	r3, [r1, #8]
   19972:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
   19976:	d1bd      	bne.n	198f4 <am_hal_sysctrl_sleep+0x34>
   19978:	490f      	ldr	r1, [pc, #60]	; (199b8 <am_hal_sysctrl_sleep+0xf8>)
   1997a:	f8d2 3370 	ldr.w	r3, [r2, #880]	; 0x370
   1997e:	6809      	ldr	r1, [r1, #0]
   19980:	f361 5319 	bfi	r3, r1, #20, #6
   19984:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
   19988:	f8d2 3380 	ldr.w	r3, [r2, #896]	; 0x380
   1998c:	f365 73df 	bfi	r3, r5, #31, #1
   19990:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
   19994:	f8d2 3380 	ldr.w	r3, [r2, #896]	; 0x380
   19998:	f365 739e 	bfi	r3, r5, #30, #1
   1999c:	4628      	mov	r0, r5
   1999e:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
   199a2:	f000 fda7 	bl	1a4f4 <buck_ldo_update_override>
   199a6:	4625      	mov	r5, r4
   199a8:	e7a4      	b.n	198f4 <am_hal_sysctrl_sleep+0x34>
   199aa:	bf00      	nop
   199ac:	40021000 	.word	0x40021000
   199b0:	40020000 	.word	0x40020000
   199b4:	e000ed00 	.word	0xe000ed00
   199b8:	10000018 	.word	0x10000018

000199bc <am_hal_sysctrl_fpu_enable>:
   199bc:	4b02      	ldr	r3, [pc, #8]	; (199c8 <am_hal_sysctrl_fpu_enable+0xc>)
   199be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   199c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   199c6:	4770      	bx	lr
   199c8:	e000ed00 	.word	0xe000ed00

000199cc <am_hal_sysctrl_fpu_stacking_enable>:
   199cc:	b510      	push	{r4, lr}
   199ce:	b082      	sub	sp, #8
   199d0:	4604      	mov	r4, r0
   199d2:	f7ff fe73 	bl	196bc <am_hal_interrupt_master_disable>
   199d6:	4909      	ldr	r1, [pc, #36]	; (199fc <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   199d8:	9001      	str	r0, [sp, #4]
   199da:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   199dc:	2c00      	cmp	r4, #0
   199de:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   199e2:	bf14      	ite	ne
   199e4:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   199e8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   199ec:	4313      	orrs	r3, r2
   199ee:	634b      	str	r3, [r1, #52]	; 0x34
   199f0:	9801      	ldr	r0, [sp, #4]
   199f2:	b002      	add	sp, #8
   199f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   199f8:	f7ff be64 	b.w	196c4 <am_hal_interrupt_master_set>
   199fc:	e000ef00 	.word	0xe000ef00

00019a00 <am_hal_tpiu_enable>:
   19a00:	4b16      	ldr	r3, [pc, #88]	; (19a5c <am_hal_tpiu_enable+0x5c>)
   19a02:	4a17      	ldr	r2, [pc, #92]	; (19a60 <am_hal_tpiu_enable+0x60>)
   19a04:	b410      	push	{r4}
   19a06:	2101      	movs	r1, #1
   19a08:	2400      	movs	r4, #0
   19a0a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   19a0e:	6059      	str	r1, [r3, #4]
   19a10:	f5a0 4361 	sub.w	r3, r0, #57600	; 0xe100
   19a14:	4293      	cmp	r3, r2
   19a16:	4a11      	ldr	r2, [pc, #68]	; (19a5c <am_hal_tpiu_enable+0x5c>)
   19a18:	bf9a      	itte	ls
   19a1a:	4b12      	ldrls	r3, [pc, #72]	; (19a64 <am_hal_tpiu_enable+0x64>)
   19a1c:	fbb3 f0f0 	udivls	r0, r3, r0
   19a20:	202f      	movhi	r0, #47	; 0x2f
   19a22:	4b11      	ldr	r3, [pc, #68]	; (19a68 <am_hal_tpiu_enable+0x68>)
   19a24:	bf98      	it	ls
   19a26:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff
   19a2a:	2102      	movs	r1, #2
   19a2c:	2400      	movs	r4, #0
   19a2e:	6110      	str	r0, [r2, #16]
   19a30:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
   19a34:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   19a38:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
   19a3c:	f361 0243 	bfi	r2, r1, #1, #3
   19a40:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   19a44:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
   19a48:	f042 0201 	orr.w	r2, r2, #1
   19a4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   19a50:	f85d 4b04 	ldr.w	r4, [sp], #4
   19a54:	2064      	movs	r0, #100	; 0x64
   19a56:	f000 b809 	b.w	19a6c <am_hal_delay_us>
   19a5a:	bf00      	nop
   19a5c:	e0040000 	.word	0xe0040000
   19a60:	001da380 	.word	0x001da380
   19a64:	02dc6c00 	.word	0x02dc6c00
   19a68:	40020000 	.word	0x40020000

00019a6c <am_hal_delay_us>:
   19a6c:	4b09      	ldr	r3, [pc, #36]	; (19a94 <am_hal_delay_us+0x28>)
   19a6e:	681b      	ldr	r3, [r3, #0]
   19a70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   19a74:	2b02      	cmp	r3, #2
   19a76:	bf0b      	itete	eq
   19a78:	0182      	lsleq	r2, r0, #6
   19a7a:	0142      	lslne	r2, r0, #5
   19a7c:	2015      	moveq	r0, #21
   19a7e:	200f      	movne	r0, #15
   19a80:	4282      	cmp	r2, r0
   19a82:	d906      	bls.n	19a92 <am_hal_delay_us+0x26>
   19a84:	4b04      	ldr	r3, [pc, #16]	; (19a98 <am_hal_delay_us+0x2c>)
   19a86:	b082      	sub	sp, #8
   19a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19a8a:	9301      	str	r3, [sp, #4]
   19a8c:	1a10      	subs	r0, r2, r0
   19a8e:	b002      	add	sp, #8
   19a90:	4718      	bx	r3
   19a92:	4770      	bx	lr
   19a94:	40021000 	.word	0x40021000
   19a98:	0001ac00 	.word	0x0001ac00

00019a9c <am_hal_delay_us_status_change>:
   19a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19aa0:	460c      	mov	r4, r1
   19aa2:	6809      	ldr	r1, [r1, #0]
   19aa4:	4011      	ands	r1, r2
   19aa6:	428b      	cmp	r3, r1
   19aa8:	d01a      	beq.n	19ae0 <am_hal_delay_us_status_change+0x44>
   19aaa:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   19aae:	b1d0      	cbz	r0, 19ae6 <am_hal_delay_us_status_change+0x4a>
   19ab0:	461e      	mov	r6, r3
   19ab2:	4b0e      	ldr	r3, [pc, #56]	; (19aec <am_hal_delay_us_status_change+0x50>)
   19ab4:	4f0e      	ldr	r7, [pc, #56]	; (19af0 <am_hal_delay_us_status_change+0x54>)
   19ab6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   19aba:	4615      	mov	r5, r2
   19abc:	e002      	b.n	19ac4 <am_hal_delay_us_status_change+0x28>
   19abe:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   19ac2:	d010      	beq.n	19ae6 <am_hal_delay_us_status_change+0x4a>
   19ac4:	6838      	ldr	r0, [r7, #0]
   19ac6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   19aca:	2802      	cmp	r0, #2
   19acc:	bf14      	ite	ne
   19ace:	2011      	movne	r0, #17
   19ad0:	202b      	moveq	r0, #43	; 0x2b
   19ad2:	47c0      	blx	r8
   19ad4:	6820      	ldr	r0, [r4, #0]
   19ad6:	4028      	ands	r0, r5
   19ad8:	42b0      	cmp	r0, r6
   19ada:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   19ade:	d1ee      	bne.n	19abe <am_hal_delay_us_status_change+0x22>
   19ae0:	2000      	movs	r0, #0
   19ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19ae6:	2004      	movs	r0, #4
   19ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19aec:	0001ac00 	.word	0x0001ac00
   19af0:	40021000 	.word	0x40021000

00019af4 <am_hal_delay_us_status_check>:
   19af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19af8:	f89d c020 	ldrb.w	ip, [sp, #32]
   19afc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 19b68 <am_hal_delay_us_status_check+0x74>
   19b00:	f8df 9068 	ldr.w	r9, [pc, #104]	; 19b6c <am_hal_delay_us_status_check+0x78>
   19b04:	4604      	mov	r4, r0
   19b06:	460d      	mov	r5, r1
   19b08:	4616      	mov	r6, r2
   19b0a:	461f      	mov	r7, r3
   19b0c:	f1bc 0f00 	cmp.w	ip, #0
   19b10:	d00d      	beq.n	19b2e <am_hal_delay_us_status_check+0x3a>
   19b12:	e020      	b.n	19b56 <am_hal_delay_us_status_check+0x62>
   19b14:	b324      	cbz	r4, 19b60 <am_hal_delay_us_status_check+0x6c>
   19b16:	f8d8 3000 	ldr.w	r3, [r8]
   19b1a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   19b1e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   19b22:	2b02      	cmp	r3, #2
   19b24:	bf14      	ite	ne
   19b26:	2011      	movne	r0, #17
   19b28:	202b      	moveq	r0, #43	; 0x2b
   19b2a:	4790      	blx	r2
   19b2c:	3c01      	subs	r4, #1
   19b2e:	6828      	ldr	r0, [r5, #0]
   19b30:	4030      	ands	r0, r6
   19b32:	42b8      	cmp	r0, r7
   19b34:	d0ee      	beq.n	19b14 <am_hal_delay_us_status_check+0x20>
   19b36:	2000      	movs	r0, #0
   19b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b3c:	b184      	cbz	r4, 19b60 <am_hal_delay_us_status_check+0x6c>
   19b3e:	f8d8 3000 	ldr.w	r3, [r8]
   19b42:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   19b46:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   19b4a:	2b02      	cmp	r3, #2
   19b4c:	bf14      	ite	ne
   19b4e:	2011      	movne	r0, #17
   19b50:	202b      	moveq	r0, #43	; 0x2b
   19b52:	4790      	blx	r2
   19b54:	3c01      	subs	r4, #1
   19b56:	6828      	ldr	r0, [r5, #0]
   19b58:	4030      	ands	r0, r6
   19b5a:	42b8      	cmp	r0, r7
   19b5c:	d1ee      	bne.n	19b3c <am_hal_delay_us_status_check+0x48>
   19b5e:	e7ea      	b.n	19b36 <am_hal_delay_us_status_check+0x42>
   19b60:	2004      	movs	r0, #4
   19b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b66:	bf00      	nop
   19b68:	40021000 	.word	0x40021000
   19b6c:	0001ac00 	.word	0x0001ac00

00019b70 <am_hal_dcu_get>:
   19b70:	4b1f      	ldr	r3, [pc, #124]	; (19bf0 <am_hal_dcu_get+0x80>)
   19b72:	689b      	ldr	r3, [r3, #8]
   19b74:	02da      	lsls	r2, r3, #11
   19b76:	d538      	bpl.n	19bea <am_hal_dcu_get+0x7a>
   19b78:	4b1e      	ldr	r3, [pc, #120]	; (19bf4 <am_hal_dcu_get+0x84>)
   19b7a:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	; 0xa7c
   19b7e:	07db      	lsls	r3, r3, #31
   19b80:	d533      	bpl.n	19bea <am_hal_dcu_get+0x7a>
   19b82:	b510      	push	{r4, lr}
   19b84:	4b1c      	ldr	r3, [pc, #112]	; (19bf8 <am_hal_dcu_get+0x88>)
   19b86:	4a1d      	ldr	r2, [pc, #116]	; (19bfc <am_hal_dcu_get+0x8c>)
   19b88:	681b      	ldr	r3, [r3, #0]
   19b8a:	6814      	ldr	r4, [r2, #0]
   19b8c:	685a      	ldr	r2, [r3, #4]
   19b8e:	b082      	sub	sp, #8
   19b90:	f04f 0e01 	mov.w	lr, #1
   19b94:	9201      	str	r2, [sp, #4]
   19b96:	681b      	ldr	r3, [r3, #0]
   19b98:	9300      	str	r3, [sp, #0]
   19b9a:	e9dd 3100 	ldrd	r3, r1, [sp]
   19b9e:	f1c4 0220 	rsb	r2, r4, #32
   19ba2:	fa01 f202 	lsl.w	r2, r1, r2
   19ba6:	40e3      	lsrs	r3, r4
   19ba8:	4313      	orrs	r3, r2
   19baa:	f1a4 0220 	sub.w	r2, r4, #32
   19bae:	fa21 f202 	lsr.w	r2, r1, r2
   19bb2:	4313      	orrs	r3, r2
   19bb4:	2200      	movs	r2, #0
   19bb6:	40e1      	lsrs	r1, r4
   19bb8:	4614      	mov	r4, r2
   19bba:	f003 0c07 	and.w	ip, r3, #7
   19bbe:	f1bc 0f05 	cmp.w	ip, #5
   19bc2:	bf08      	it	eq
   19bc4:	fa0e fc02 	lsleq.w	ip, lr, r2
   19bc8:	f102 0201 	add.w	r2, r2, #1
   19bcc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   19bd0:	bf08      	it	eq
   19bd2:	ea44 040c 	orreq.w	r4, r4, ip
   19bd6:	2a14      	cmp	r2, #20
   19bd8:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
   19bdc:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   19be0:	d1eb      	bne.n	19bba <am_hal_dcu_get+0x4a>
   19be2:	6004      	str	r4, [r0, #0]
   19be4:	2000      	movs	r0, #0
   19be6:	b002      	add	sp, #8
   19be8:	bd10      	pop	{r4, pc}
   19bea:	2007      	movs	r0, #7
   19bec:	4770      	bx	lr
   19bee:	bf00      	nop
   19bf0:	40021000 	.word	0x40021000
   19bf4:	400c0000 	.word	0x400c0000
   19bf8:	1000000c 	.word	0x1000000c
   19bfc:	1000043c 	.word	0x1000043c

00019c00 <am_hal_dcu_update>:
   19c00:	4b26      	ldr	r3, [pc, #152]	; (19c9c <am_hal_dcu_update+0x9c>)
   19c02:	689b      	ldr	r3, [r3, #8]
   19c04:	02d8      	lsls	r0, r3, #11
   19c06:	d544      	bpl.n	19c92 <am_hal_dcu_update+0x92>
   19c08:	4b25      	ldr	r3, [pc, #148]	; (19ca0 <am_hal_dcu_update+0xa0>)
   19c0a:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	; 0xa7c
   19c0e:	07da      	lsls	r2, r3, #31
   19c10:	d53f      	bpl.n	19c92 <am_hal_dcu_update+0x92>
   19c12:	b570      	push	{r4, r5, r6, lr}
   19c14:	4b23      	ldr	r3, [pc, #140]	; (19ca4 <am_hal_dcu_update+0xa4>)
   19c16:	681b      	ldr	r3, [r3, #0]
   19c18:	2400      	movs	r4, #0
   19c1a:	b084      	sub	sp, #16
   19c1c:	0849      	lsrs	r1, r1, #1
   19c1e:	f103 063c 	add.w	r6, r3, #60	; 0x3c
   19c22:	4625      	mov	r5, r4
   19c24:	f04f 0e07 	mov.w	lr, #7
   19c28:	f011 0f01 	tst.w	r1, #1
   19c2c:	f1a3 0220 	sub.w	r2, r3, #32
   19c30:	ea4f 0151 	mov.w	r1, r1, lsr #1
   19c34:	f1c3 0020 	rsb	r0, r3, #32
   19c38:	d009      	beq.n	19c4e <am_hal_dcu_update+0x4e>
   19c3a:	fa2e f000 	lsr.w	r0, lr, r0
   19c3e:	fa0e f202 	lsl.w	r2, lr, r2
   19c42:	fa0e fc03 	lsl.w	ip, lr, r3
   19c46:	4302      	orrs	r2, r0
   19c48:	4660      	mov	r0, ip
   19c4a:	4304      	orrs	r4, r0
   19c4c:	4315      	orrs	r5, r2
   19c4e:	3303      	adds	r3, #3
   19c50:	429e      	cmp	r6, r3
   19c52:	d1e9      	bne.n	19c28 <am_hal_dcu_update+0x28>
   19c54:	4b14      	ldr	r3, [pc, #80]	; (19ca8 <am_hal_dcu_update+0xa8>)
   19c56:	681b      	ldr	r3, [r3, #0]
   19c58:	685a      	ldr	r2, [r3, #4]
   19c5a:	9203      	str	r2, [sp, #12]
   19c5c:	681b      	ldr	r3, [r3, #0]
   19c5e:	9302      	str	r3, [sp, #8]
   19c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19c64:	4014      	ands	r4, r2
   19c66:	401d      	ands	r5, r3
   19c68:	ea54 0305 	orrs.w	r3, r4, r5
   19c6c:	d113      	bne.n	19c96 <am_hal_dcu_update+0x96>
   19c6e:	4b0f      	ldr	r3, [pc, #60]	; (19cac <am_hal_dcu_update+0xac>)
   19c70:	4a0b      	ldr	r2, [pc, #44]	; (19ca0 <am_hal_dcu_update+0xa0>)
   19c72:	681b      	ldr	r3, [r3, #0]
   19c74:	6859      	ldr	r1, [r3, #4]
   19c76:	9101      	str	r1, [sp, #4]
   19c78:	6819      	ldr	r1, [r3, #0]
   19c7a:	9100      	str	r1, [sp, #0]
   19c7c:	9901      	ldr	r1, [sp, #4]
   19c7e:	6059      	str	r1, [r3, #4]
   19c80:	9900      	ldr	r1, [sp, #0]
   19c82:	6019      	str	r1, [r3, #0]
   19c84:	f8d2 3a7c 	ldr.w	r3, [r2, #2684]	; 0xa7c
   19c88:	07db      	lsls	r3, r3, #31
   19c8a:	d5fb      	bpl.n	19c84 <am_hal_dcu_update+0x84>
   19c8c:	2000      	movs	r0, #0
   19c8e:	b004      	add	sp, #16
   19c90:	bd70      	pop	{r4, r5, r6, pc}
   19c92:	2007      	movs	r0, #7
   19c94:	4770      	bx	lr
   19c96:	2007      	movs	r0, #7
   19c98:	b004      	add	sp, #16
   19c9a:	bd70      	pop	{r4, r5, r6, pc}
   19c9c:	40021000 	.word	0x40021000
   19ca0:	400c0000 	.word	0x400c0000
   19ca4:	1000043c 	.word	0x1000043c
   19ca8:	10000010 	.word	0x10000010
   19cac:	1000000c 	.word	0x1000000c

00019cb0 <am_hal_gpio_pinconfig>:
   19cb0:	287f      	cmp	r0, #127	; 0x7f
   19cb2:	d81f      	bhi.n	19cf4 <am_hal_gpio_pinconfig+0x44>
   19cb4:	f3c1 2381 	ubfx	r3, r1, #10, #2
   19cb8:	2b01      	cmp	r3, #1
   19cba:	b410      	push	{r4}
   19cbc:	d909      	bls.n	19cd2 <am_hal_gpio_pinconfig+0x22>
   19cbe:	4b10      	ldr	r3, [pc, #64]	; (19d00 <am_hal_gpio_pinconfig+0x50>)
   19cc0:	0942      	lsrs	r2, r0, #5
   19cc2:	f000 041f 	and.w	r4, r0, #31
   19cc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   19cca:	2301      	movs	r3, #1
   19ccc:	40a3      	lsls	r3, r4
   19cce:	4213      	tst	r3, r2
   19cd0:	d012      	beq.n	19cf8 <am_hal_gpio_pinconfig+0x48>
   19cd2:	0080      	lsls	r0, r0, #2
   19cd4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   19cd8:	4b0a      	ldr	r3, [pc, #40]	; (19d04 <am_hal_gpio_pinconfig+0x54>)
   19cda:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
   19cde:	2200      	movs	r2, #0
   19ce0:	2473      	movs	r4, #115	; 0x73
   19ce2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   19ce6:	6001      	str	r1, [r0, #0]
   19ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
   19cec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   19cf0:	4610      	mov	r0, r2
   19cf2:	4770      	bx	lr
   19cf4:	2005      	movs	r0, #5
   19cf6:	4770      	bx	lr
   19cf8:	2007      	movs	r0, #7
   19cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
   19cfe:	4770      	bx	lr
   19d00:	0001a9c0 	.word	0x0001a9c0
   19d04:	40010000 	.word	0x40010000

00019d08 <am_hal_gpio_interrupt_irq_status_get>:
   19d08:	2a00      	cmp	r2, #0
   19d0a:	d033      	beq.n	19d74 <am_hal_gpio_interrupt_irq_status_get+0x6c>
   19d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d10:	f1a0 0638 	sub.w	r6, r0, #56	; 0x38
   19d14:	2e07      	cmp	r6, #7
   19d16:	b082      	sub	sp, #8
   19d18:	4605      	mov	r5, r0
   19d1a:	d827      	bhi.n	19d6c <am_hal_gpio_interrupt_irq_status_get+0x64>
   19d1c:	4614      	mov	r4, r2
   19d1e:	460f      	mov	r7, r1
   19d20:	f7ff fccc 	bl	196bc <am_hal_interrupt_master_disable>
   19d24:	ea4f 1806 	mov.w	r8, r6, lsl #4
   19d28:	4a13      	ldr	r2, [pc, #76]	; (19d78 <am_hal_gpio_interrupt_irq_status_get+0x70>)
   19d2a:	9001      	str	r0, [sp, #4]
   19d2c:	b96f      	cbnz	r7, 19d4a <am_hal_gpio_interrupt_irq_status_get+0x42>
   19d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d32:	6023      	str	r3, [r4, #0]
   19d34:	f858 2002 	ldr.w	r2, [r8, r2]
   19d38:	9801      	ldr	r0, [sp, #4]
   19d3a:	4013      	ands	r3, r2
   19d3c:	6023      	str	r3, [r4, #0]
   19d3e:	f7ff fcc1 	bl	196c4 <am_hal_interrupt_master_set>
   19d42:	2000      	movs	r0, #0
   19d44:	b002      	add	sp, #8
   19d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d4a:	2d3b      	cmp	r5, #59	; 0x3b
   19d4c:	bf8c      	ite	hi
   19d4e:	2301      	movhi	r3, #1
   19d50:	2300      	movls	r3, #0
   19d52:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   19d56:	bf8c      	ite	hi
   19d58:	2104      	movhi	r1, #4
   19d5a:	2100      	movls	r1, #0
   19d5c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
   19d60:	1a76      	subs	r6, r6, r1
   19d62:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   19d66:	0136      	lsls	r6, r6, #4
   19d68:	6833      	ldr	r3, [r6, #0]
   19d6a:	e7e2      	b.n	19d32 <am_hal_gpio_interrupt_irq_status_get+0x2a>
   19d6c:	2006      	movs	r0, #6
   19d6e:	b002      	add	sp, #8
   19d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d74:	2006      	movs	r0, #6
   19d76:	4770      	bx	lr
   19d78:	400102c4 	.word	0x400102c4

00019d7c <am_hal_gpio_interrupt_irq_clear>:
   19d7c:	3838      	subs	r0, #56	; 0x38
   19d7e:	2807      	cmp	r0, #7
   19d80:	d804      	bhi.n	19d8c <am_hal_gpio_interrupt_irq_clear+0x10>
   19d82:	0103      	lsls	r3, r0, #4
   19d84:	4a02      	ldr	r2, [pc, #8]	; (19d90 <am_hal_gpio_interrupt_irq_clear+0x14>)
   19d86:	2000      	movs	r0, #0
   19d88:	5099      	str	r1, [r3, r2]
   19d8a:	4770      	bx	lr
   19d8c:	2006      	movs	r0, #6
   19d8e:	4770      	bx	lr
   19d90:	400102c8 	.word	0x400102c8

00019d94 <am_hal_gpio_interrupt_service>:
   19d94:	3838      	subs	r0, #56	; 0x38
   19d96:	2807      	cmp	r0, #7
   19d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d9c:	d826      	bhi.n	19dec <am_hal_gpio_interrupt_service+0x58>
   19d9e:	4689      	mov	r9, r1
   19da0:	b349      	cbz	r1, 19df6 <am_hal_gpio_interrupt_service+0x62>
   19da2:	4e16      	ldr	r6, [pc, #88]	; (19dfc <am_hal_gpio_interrupt_service+0x68>)
   19da4:	4f16      	ldr	r7, [pc, #88]	; (19e00 <am_hal_gpio_interrupt_service+0x6c>)
   19da6:	f04f 0800 	mov.w	r8, #0
   19daa:	0144      	lsls	r4, r0, #5
   19dac:	2501      	movs	r5, #1
   19dae:	f1c9 0300 	rsb	r3, r9, #0
   19db2:	ea03 0309 	and.w	r3, r3, r9
   19db6:	fab3 f383 	clz	r3, r3
   19dba:	f1c3 031f 	rsb	r3, r3, #31
   19dbe:	18e1      	adds	r1, r4, r3
   19dc0:	fa05 f303 	lsl.w	r3, r5, r3
   19dc4:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
   19dc8:	ea29 0903 	bic.w	r9, r9, r3
   19dcc:	b142      	cbz	r2, 19de0 <am_hal_gpio_interrupt_service+0x4c>
   19dce:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
   19dd2:	4790      	blx	r2
   19dd4:	f1b9 0f00 	cmp.w	r9, #0
   19dd8:	d1e9      	bne.n	19dae <am_hal_gpio_interrupt_service+0x1a>
   19dda:	4640      	mov	r0, r8
   19ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19de0:	f04f 0807 	mov.w	r8, #7
   19de4:	f1b9 0f00 	cmp.w	r9, #0
   19de8:	d1e1      	bne.n	19dae <am_hal_gpio_interrupt_service+0x1a>
   19dea:	e7f6      	b.n	19dda <am_hal_gpio_interrupt_service+0x46>
   19dec:	f04f 0805 	mov.w	r8, #5
   19df0:	4640      	mov	r0, r8
   19df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19df6:	4688      	mov	r8, r1
   19df8:	e7ef      	b.n	19dda <am_hal_gpio_interrupt_service+0x46>
   19dfa:	bf00      	nop
   19dfc:	10000440 	.word	0x10000440
   19e00:	10000840 	.word	0x10000840

00019e04 <am_hal_pwrctrl_mcu_memory_config>:
   19e04:	b570      	push	{r4, r5, r6, lr}
   19e06:	7803      	ldrb	r3, [r0, #0]
   19e08:	2b01      	cmp	r3, #1
   19e0a:	b082      	sub	sp, #8
   19e0c:	4605      	mov	r5, r0
   19e0e:	d073      	beq.n	19ef8 <am_hal_pwrctrl_mcu_memory_config+0xf4>
   19e10:	2b02      	cmp	r3, #2
   19e12:	d067      	beq.n	19ee4 <am_hal_pwrctrl_mcu_memory_config+0xe0>
   19e14:	2b00      	cmp	r3, #0
   19e16:	d05b      	beq.n	19ed0 <am_hal_pwrctrl_mcu_memory_config+0xcc>
   19e18:	4c4f      	ldr	r4, [pc, #316]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19e1a:	78aa      	ldrb	r2, [r5, #2]
   19e1c:	6963      	ldr	r3, [r4, #20]
   19e1e:	494f      	ldr	r1, [pc, #316]	; (19f5c <am_hal_pwrctrl_mcu_memory_config+0x158>)
   19e20:	f362 0302 	bfi	r3, r2, #0, #3
   19e24:	6163      	str	r3, [r4, #20]
   19e26:	6963      	ldr	r3, [r4, #20]
   19e28:	792a      	ldrb	r2, [r5, #4]
   19e2a:	f362 03c3 	bfi	r3, r2, #3, #1
   19e2e:	6163      	str	r3, [r4, #20]
   19e30:	2601      	movs	r6, #1
   19e32:	6963      	ldr	r3, [r4, #20]
   19e34:	9600      	str	r6, [sp, #0]
   19e36:	223f      	movs	r2, #63	; 0x3f
   19e38:	2005      	movs	r0, #5
   19e3a:	f7ff fe5b 	bl	19af4 <am_hal_delay_us_status_check>
   19e3e:	b940      	cbnz	r0, 19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19e40:	69a2      	ldr	r2, [r4, #24]
   19e42:	6963      	ldr	r3, [r4, #20]
   19e44:	f3c2 1200 	ubfx	r2, r2, #4, #1
   19e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
   19e4c:	429a      	cmp	r2, r3
   19e4e:	d002      	beq.n	19e56 <am_hal_pwrctrl_mcu_memory_config+0x52>
   19e50:	4630      	mov	r0, r6
   19e52:	b002      	add	sp, #8
   19e54:	bd70      	pop	{r4, r5, r6, pc}
   19e56:	69a2      	ldr	r2, [r4, #24]
   19e58:	6963      	ldr	r3, [r4, #20]
   19e5a:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19e5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19e62:	429a      	cmp	r2, r3
   19e64:	d1f4      	bne.n	19e50 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   19e66:	69a2      	ldr	r2, [r4, #24]
   19e68:	6963      	ldr	r3, [r4, #20]
   19e6a:	f002 0207 	and.w	r2, r2, #7
   19e6e:	f003 0307 	and.w	r3, r3, #7
   19e72:	429a      	cmp	r2, r3
   19e74:	d1ec      	bne.n	19e50 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   19e76:	69a2      	ldr	r2, [r4, #24]
   19e78:	6963      	ldr	r3, [r4, #20]
   19e7a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   19e7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   19e82:	429a      	cmp	r2, r3
   19e84:	d1e4      	bne.n	19e50 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   19e86:	786b      	ldrb	r3, [r5, #1]
   19e88:	2b00      	cmp	r3, #0
   19e8a:	d05f      	beq.n	19f4c <am_hal_pwrctrl_mcu_memory_config+0x148>
   19e8c:	69e3      	ldr	r3, [r4, #28]
   19e8e:	f360 1304 	bfi	r3, r0, #4, #1
   19e92:	61e3      	str	r3, [r4, #28]
   19e94:	796b      	ldrb	r3, [r5, #5]
   19e96:	2b00      	cmp	r3, #0
   19e98:	d052      	beq.n	19f40 <am_hal_pwrctrl_mcu_memory_config+0x13c>
   19e9a:	4b2f      	ldr	r3, [pc, #188]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19e9c:	69da      	ldr	r2, [r3, #28]
   19e9e:	f36f 02c3 	bfc	r2, #3, #1
   19ea2:	61da      	str	r2, [r3, #28]
   19ea4:	78eb      	ldrb	r3, [r5, #3]
   19ea6:	2b07      	cmp	r3, #7
   19ea8:	d8d3      	bhi.n	19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19eaa:	a201      	add	r2, pc, #4	; (adr r2, 19eb0 <am_hal_pwrctrl_mcu_memory_config+0xac>)
   19eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19eb0:	00019f35 	.word	0x00019f35
   19eb4:	00019f27 	.word	0x00019f27
   19eb8:	00019e53 	.word	0x00019e53
   19ebc:	00019f19 	.word	0x00019f19
   19ec0:	00019e53 	.word	0x00019e53
   19ec4:	00019e53 	.word	0x00019e53
   19ec8:	00019e53 	.word	0x00019e53
   19ecc:	00019f0d 	.word	0x00019f0d
   19ed0:	4a21      	ldr	r2, [pc, #132]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19ed2:	6951      	ldr	r1, [r2, #20]
   19ed4:	f363 1104 	bfi	r1, r3, #4, #1
   19ed8:	6151      	str	r1, [r2, #20]
   19eda:	6951      	ldr	r1, [r2, #20]
   19edc:	f363 1145 	bfi	r1, r3, #5, #1
   19ee0:	6151      	str	r1, [r2, #20]
   19ee2:	e799      	b.n	19e18 <am_hal_pwrctrl_mcu_memory_config+0x14>
   19ee4:	4b1c      	ldr	r3, [pc, #112]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19ee6:	695a      	ldr	r2, [r3, #20]
   19ee8:	f042 0210 	orr.w	r2, r2, #16
   19eec:	615a      	str	r2, [r3, #20]
   19eee:	695a      	ldr	r2, [r3, #20]
   19ef0:	f042 0220 	orr.w	r2, r2, #32
   19ef4:	615a      	str	r2, [r3, #20]
   19ef6:	e78f      	b.n	19e18 <am_hal_pwrctrl_mcu_memory_config+0x14>
   19ef8:	4b17      	ldr	r3, [pc, #92]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19efa:	695a      	ldr	r2, [r3, #20]
   19efc:	f042 0210 	orr.w	r2, r2, #16
   19f00:	615a      	str	r2, [r3, #20]
   19f02:	695a      	ldr	r2, [r3, #20]
   19f04:	f36f 1245 	bfc	r2, #5, #1
   19f08:	615a      	str	r2, [r3, #20]
   19f0a:	e785      	b.n	19e18 <am_hal_pwrctrl_mcu_memory_config+0x14>
   19f0c:	4b12      	ldr	r3, [pc, #72]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19f0e:	69da      	ldr	r2, [r3, #28]
   19f10:	f36f 0202 	bfc	r2, #0, #3
   19f14:	61da      	str	r2, [r3, #28]
   19f16:	e79c      	b.n	19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19f18:	4b0f      	ldr	r3, [pc, #60]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19f1a:	69da      	ldr	r2, [r3, #28]
   19f1c:	2104      	movs	r1, #4
   19f1e:	f361 0202 	bfi	r2, r1, #0, #3
   19f22:	61da      	str	r2, [r3, #28]
   19f24:	e795      	b.n	19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19f26:	4b0c      	ldr	r3, [pc, #48]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19f28:	69da      	ldr	r2, [r3, #28]
   19f2a:	2106      	movs	r1, #6
   19f2c:	f361 0202 	bfi	r2, r1, #0, #3
   19f30:	61da      	str	r2, [r3, #28]
   19f32:	e78e      	b.n	19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19f34:	4a08      	ldr	r2, [pc, #32]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19f36:	69d3      	ldr	r3, [r2, #28]
   19f38:	f043 0307 	orr.w	r3, r3, #7
   19f3c:	61d3      	str	r3, [r2, #28]
   19f3e:	e788      	b.n	19e52 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   19f40:	4a05      	ldr	r2, [pc, #20]	; (19f58 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   19f42:	69d3      	ldr	r3, [r2, #28]
   19f44:	f043 0308 	orr.w	r3, r3, #8
   19f48:	61d3      	str	r3, [r2, #28]
   19f4a:	e7ab      	b.n	19ea4 <am_hal_pwrctrl_mcu_memory_config+0xa0>
   19f4c:	69e3      	ldr	r3, [r4, #28]
   19f4e:	f043 0310 	orr.w	r3, r3, #16
   19f52:	61e3      	str	r3, [r4, #28]
   19f54:	e79e      	b.n	19e94 <am_hal_pwrctrl_mcu_memory_config+0x90>
   19f56:	bf00      	nop
   19f58:	40021000 	.word	0x40021000
   19f5c:	40021018 	.word	0x40021018

00019f60 <am_hal_pwrctrl_sram_config>:
   19f60:	b570      	push	{r4, r5, r6, lr}
   19f62:	4c29      	ldr	r4, [pc, #164]	; (1a008 <am_hal_pwrctrl_sram_config+0xa8>)
   19f64:	7802      	ldrb	r2, [r0, #0]
   19f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f68:	4928      	ldr	r1, [pc, #160]	; (1a00c <am_hal_pwrctrl_sram_config+0xac>)
   19f6a:	f362 0301 	bfi	r3, r2, #0, #2
   19f6e:	b082      	sub	sp, #8
   19f70:	6263      	str	r3, [r4, #36]	; 0x24
   19f72:	2601      	movs	r6, #1
   19f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f76:	9600      	str	r6, [sp, #0]
   19f78:	4605      	mov	r5, r0
   19f7a:	2203      	movs	r2, #3
   19f7c:	2005      	movs	r0, #5
   19f7e:	f7ff fdb9 	bl	19af4 <am_hal_delay_us_status_check>
   19f82:	b940      	cbnz	r0, 19f96 <am_hal_pwrctrl_sram_config+0x36>
   19f84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   19f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f88:	f002 0203 	and.w	r2, r2, #3
   19f8c:	f003 0303 	and.w	r3, r3, #3
   19f90:	429a      	cmp	r2, r3
   19f92:	d002      	beq.n	19f9a <am_hal_pwrctrl_sram_config+0x3a>
   19f94:	4630      	mov	r0, r6
   19f96:	b002      	add	sp, #8
   19f98:	bd70      	pop	{r4, r5, r6, pc}
   19f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19f9c:	786b      	ldrb	r3, [r5, #1]
   19f9e:	f895 c002 	ldrb.w	ip, [r5, #2]
   19fa2:	78ee      	ldrb	r6, [r5, #3]
   19fa4:	7929      	ldrb	r1, [r5, #4]
   19fa6:	f363 0283 	bfi	r2, r3, #2, #2
   19faa:	796b      	ldrb	r3, [r5, #5]
   19fac:	62e2      	str	r2, [r4, #44]	; 0x2c
   19fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19fb0:	f36c 1287 	bfi	r2, ip, #6, #2
   19fb4:	62e2      	str	r2, [r4, #44]	; 0x2c
   19fb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19fb8:	f366 2209 	bfi	r2, r6, #8, #2
   19fbc:	62e2      	str	r2, [r4, #44]	; 0x2c
   19fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19fc0:	f361 1205 	bfi	r2, r1, #4, #2
   19fc4:	62e2      	str	r2, [r4, #44]	; 0x2c
   19fc6:	2b03      	cmp	r3, #3
   19fc8:	d8e5      	bhi.n	19f96 <am_hal_pwrctrl_sram_config+0x36>
   19fca:	e8df f003 	tbb	[pc, r3]
   19fce:	0f16      	.short	0x0f16
   19fd0:	0208      	.short	0x0208
   19fd2:	4b0d      	ldr	r3, [pc, #52]	; (1a008 <am_hal_pwrctrl_sram_config+0xa8>)
   19fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19fd6:	f36f 0201 	bfc	r2, #0, #2
   19fda:	62da      	str	r2, [r3, #44]	; 0x2c
   19fdc:	e7db      	b.n	19f96 <am_hal_pwrctrl_sram_config+0x36>
   19fde:	4b0a      	ldr	r3, [pc, #40]	; (1a008 <am_hal_pwrctrl_sram_config+0xa8>)
   19fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19fe2:	2101      	movs	r1, #1
   19fe4:	f361 0201 	bfi	r2, r1, #0, #2
   19fe8:	62da      	str	r2, [r3, #44]	; 0x2c
   19fea:	e7d4      	b.n	19f96 <am_hal_pwrctrl_sram_config+0x36>
   19fec:	4b06      	ldr	r3, [pc, #24]	; (1a008 <am_hal_pwrctrl_sram_config+0xa8>)
   19fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ff0:	2102      	movs	r1, #2
   19ff2:	f361 0201 	bfi	r2, r1, #0, #2
   19ff6:	62da      	str	r2, [r3, #44]	; 0x2c
   19ff8:	e7cd      	b.n	19f96 <am_hal_pwrctrl_sram_config+0x36>
   19ffa:	4a03      	ldr	r2, [pc, #12]	; (1a008 <am_hal_pwrctrl_sram_config+0xa8>)
   19ffc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19ffe:	f043 0303 	orr.w	r3, r3, #3
   1a002:	62d3      	str	r3, [r2, #44]	; 0x2c
   1a004:	e7c7      	b.n	19f96 <am_hal_pwrctrl_sram_config+0x36>
   1a006:	bf00      	nop
   1a008:	40021000 	.word	0x40021000
   1a00c:	40021028 	.word	0x40021028

0001a010 <am_hal_pwrctrl_dsp_memory_config>:
   1a010:	b530      	push	{r4, r5, lr}
   1a012:	460c      	mov	r4, r1
   1a014:	b083      	sub	sp, #12
   1a016:	2800      	cmp	r0, #0
   1a018:	d053      	beq.n	1a0c2 <am_hal_pwrctrl_dsp_memory_config+0xb2>
   1a01a:	2801      	cmp	r0, #1
   1a01c:	d14e      	bne.n	1a0bc <am_hal_pwrctrl_dsp_memory_config+0xac>
   1a01e:	780b      	ldrb	r3, [r1, #0]
   1a020:	4a6b      	ldr	r2, [pc, #428]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a022:	2b00      	cmp	r3, #0
   1a024:	f000 809d 	beq.w	1a162 <am_hal_pwrctrl_dsp_memory_config+0x152>
   1a028:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1a02a:	f043 0302 	orr.w	r3, r3, #2
   1a02e:	6793      	str	r3, [r2, #120]	; 0x78
   1a030:	78a3      	ldrb	r3, [r4, #2]
   1a032:	4a67      	ldr	r2, [pc, #412]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a034:	2b00      	cmp	r3, #0
   1a036:	f000 809d 	beq.w	1a174 <am_hal_pwrctrl_dsp_memory_config+0x164>
   1a03a:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1a03c:	f043 0301 	orr.w	r3, r3, #1
   1a040:	6793      	str	r3, [r2, #120]	; 0x78
   1a042:	4d63      	ldr	r5, [pc, #396]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a044:	4963      	ldr	r1, [pc, #396]	; (1a1d4 <am_hal_pwrctrl_dsp_memory_config+0x1c4>)
   1a046:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1a048:	2201      	movs	r2, #1
   1a04a:	9200      	str	r2, [sp, #0]
   1a04c:	2005      	movs	r0, #5
   1a04e:	2203      	movs	r2, #3
   1a050:	f7ff fd50 	bl	19af4 <am_hal_delay_us_status_check>
   1a054:	bb98      	cbnz	r0, 1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a056:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   1a058:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1a05a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1a05e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a062:	429a      	cmp	r2, r3
   1a064:	f040 808b 	bne.w	1a17e <am_hal_pwrctrl_dsp_memory_config+0x16e>
   1a068:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   1a06a:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1a06c:	f002 0201 	and.w	r2, r2, #1
   1a070:	f003 0301 	and.w	r3, r3, #1
   1a074:	429a      	cmp	r2, r3
   1a076:	f040 8082 	bne.w	1a17e <am_hal_pwrctrl_dsp_memory_config+0x16e>
   1a07a:	7863      	ldrb	r3, [r4, #1]
   1a07c:	2b00      	cmp	r3, #0
   1a07e:	f040 8081 	bne.w	1a184 <am_hal_pwrctrl_dsp_memory_config+0x174>
   1a082:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1a086:	f043 0304 	orr.w	r3, r3, #4
   1a08a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   1a08e:	78e3      	ldrb	r3, [r4, #3]
   1a090:	4a4f      	ldr	r2, [pc, #316]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a092:	2b00      	cmp	r3, #0
   1a094:	f000 8095 	beq.w	1a1c2 <am_hal_pwrctrl_dsp_memory_config+0x1b2>
   1a098:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a09c:	f043 0302 	orr.w	r3, r3, #2
   1a0a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   1a0a4:	7923      	ldrb	r3, [r4, #4]
   1a0a6:	2b00      	cmp	r3, #0
   1a0a8:	f000 8083 	beq.w	1a1b2 <am_hal_pwrctrl_dsp_memory_config+0x1a2>
   1a0ac:	4b48      	ldr	r3, [pc, #288]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a0ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1a0b2:	f36f 0200 	bfc	r2, #0, #1
   1a0b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1a0ba:	e000      	b.n	1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a0bc:	2000      	movs	r0, #0
   1a0be:	b003      	add	sp, #12
   1a0c0:	bd30      	pop	{r4, r5, pc}
   1a0c2:	780b      	ldrb	r3, [r1, #0]
   1a0c4:	4a42      	ldr	r2, [pc, #264]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a0c6:	2b00      	cmp	r3, #0
   1a0c8:	d13e      	bne.n	1a148 <am_hal_pwrctrl_dsp_memory_config+0x138>
   1a0ca:	6d91      	ldr	r1, [r2, #88]	; 0x58
   1a0cc:	f363 0141 	bfi	r1, r3, #1, #1
   1a0d0:	6591      	str	r1, [r2, #88]	; 0x58
   1a0d2:	78a3      	ldrb	r3, [r4, #2]
   1a0d4:	4a3e      	ldr	r2, [pc, #248]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a0d6:	2b00      	cmp	r3, #0
   1a0d8:	d03e      	beq.n	1a158 <am_hal_pwrctrl_dsp_memory_config+0x148>
   1a0da:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1a0dc:	f043 0301 	orr.w	r3, r3, #1
   1a0e0:	6593      	str	r3, [r2, #88]	; 0x58
   1a0e2:	4d3b      	ldr	r5, [pc, #236]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a0e4:	493c      	ldr	r1, [pc, #240]	; (1a1d8 <am_hal_pwrctrl_dsp_memory_config+0x1c8>)
   1a0e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1a0e8:	2201      	movs	r2, #1
   1a0ea:	9200      	str	r2, [sp, #0]
   1a0ec:	2005      	movs	r0, #5
   1a0ee:	2203      	movs	r2, #3
   1a0f0:	f7ff fd00 	bl	19af4 <am_hal_delay_us_status_check>
   1a0f4:	2800      	cmp	r0, #0
   1a0f6:	d1e2      	bne.n	1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a0f8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1a0fa:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1a0fc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1a100:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a104:	429a      	cmp	r2, r3
   1a106:	d13a      	bne.n	1a17e <am_hal_pwrctrl_dsp_memory_config+0x16e>
   1a108:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1a10a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1a10c:	f002 0201 	and.w	r2, r2, #1
   1a110:	f003 0301 	and.w	r3, r3, #1
   1a114:	429a      	cmp	r2, r3
   1a116:	d132      	bne.n	1a17e <am_hal_pwrctrl_dsp_memory_config+0x16e>
   1a118:	7863      	ldrb	r3, [r4, #1]
   1a11a:	2b00      	cmp	r3, #0
   1a11c:	d139      	bne.n	1a192 <am_hal_pwrctrl_dsp_memory_config+0x182>
   1a11e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1a120:	f043 0304 	orr.w	r3, r3, #4
   1a124:	662b      	str	r3, [r5, #96]	; 0x60
   1a126:	78e3      	ldrb	r3, [r4, #3]
   1a128:	4a29      	ldr	r2, [pc, #164]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	d03c      	beq.n	1a1a8 <am_hal_pwrctrl_dsp_memory_config+0x198>
   1a12e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1a130:	f043 0302 	orr.w	r3, r3, #2
   1a134:	6613      	str	r3, [r2, #96]	; 0x60
   1a136:	7923      	ldrb	r3, [r4, #4]
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d02f      	beq.n	1a19c <am_hal_pwrctrl_dsp_memory_config+0x18c>
   1a13c:	4b24      	ldr	r3, [pc, #144]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a13e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a140:	f36f 0200 	bfc	r2, #0, #1
   1a144:	661a      	str	r2, [r3, #96]	; 0x60
   1a146:	e7ba      	b.n	1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a148:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1a14a:	f043 0302 	orr.w	r3, r3, #2
   1a14e:	6593      	str	r3, [r2, #88]	; 0x58
   1a150:	78a3      	ldrb	r3, [r4, #2]
   1a152:	4a1f      	ldr	r2, [pc, #124]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a154:	2b00      	cmp	r3, #0
   1a156:	d1c0      	bne.n	1a0da <am_hal_pwrctrl_dsp_memory_config+0xca>
   1a158:	6d91      	ldr	r1, [r2, #88]	; 0x58
   1a15a:	f363 0100 	bfi	r1, r3, #0, #1
   1a15e:	6591      	str	r1, [r2, #88]	; 0x58
   1a160:	e7bf      	b.n	1a0e2 <am_hal_pwrctrl_dsp_memory_config+0xd2>
   1a162:	6f91      	ldr	r1, [r2, #120]	; 0x78
   1a164:	f363 0141 	bfi	r1, r3, #1, #1
   1a168:	6791      	str	r1, [r2, #120]	; 0x78
   1a16a:	78a3      	ldrb	r3, [r4, #2]
   1a16c:	4a18      	ldr	r2, [pc, #96]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a16e:	2b00      	cmp	r3, #0
   1a170:	f47f af63 	bne.w	1a03a <am_hal_pwrctrl_dsp_memory_config+0x2a>
   1a174:	6f91      	ldr	r1, [r2, #120]	; 0x78
   1a176:	f363 0100 	bfi	r1, r3, #0, #1
   1a17a:	6791      	str	r1, [r2, #120]	; 0x78
   1a17c:	e761      	b.n	1a042 <am_hal_pwrctrl_dsp_memory_config+0x32>
   1a17e:	2001      	movs	r0, #1
   1a180:	b003      	add	sp, #12
   1a182:	bd30      	pop	{r4, r5, pc}
   1a184:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1a188:	f360 0382 	bfi	r3, r0, #2, #1
   1a18c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   1a190:	e77d      	b.n	1a08e <am_hal_pwrctrl_dsp_memory_config+0x7e>
   1a192:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1a194:	f360 0382 	bfi	r3, r0, #2, #1
   1a198:	662b      	str	r3, [r5, #96]	; 0x60
   1a19a:	e7c4      	b.n	1a126 <am_hal_pwrctrl_dsp_memory_config+0x116>
   1a19c:	4a0c      	ldr	r2, [pc, #48]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a19e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1a1a0:	f043 0301 	orr.w	r3, r3, #1
   1a1a4:	6613      	str	r3, [r2, #96]	; 0x60
   1a1a6:	e78a      	b.n	1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a1a8:	6e11      	ldr	r1, [r2, #96]	; 0x60
   1a1aa:	f363 0141 	bfi	r1, r3, #1, #1
   1a1ae:	6611      	str	r1, [r2, #96]	; 0x60
   1a1b0:	e7c1      	b.n	1a136 <am_hal_pwrctrl_dsp_memory_config+0x126>
   1a1b2:	4a07      	ldr	r2, [pc, #28]	; (1a1d0 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   1a1b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a1b8:	f043 0301 	orr.w	r3, r3, #1
   1a1bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   1a1c0:	e77d      	b.n	1a0be <am_hal_pwrctrl_dsp_memory_config+0xae>
   1a1c2:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   1a1c6:	f363 0141 	bfi	r1, r3, #1, #1
   1a1ca:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
   1a1ce:	e769      	b.n	1a0a4 <am_hal_pwrctrl_dsp_memory_config+0x94>
   1a1d0:	40021000 	.word	0x40021000
   1a1d4:	4002107c 	.word	0x4002107c
   1a1d8:	4002105c 	.word	0x4002105c

0001a1dc <am_hal_pwrctrl_periph_disable>:
   1a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1e0:	2821      	cmp	r0, #33	; 0x21
   1a1e2:	b085      	sub	sp, #20
   1a1e4:	d82b      	bhi.n	1a23e <am_hal_pwrctrl_periph_disable+0x62>
   1a1e6:	4b55      	ldr	r3, [pc, #340]	; (1a33c <am_hal_pwrctrl_periph_disable+0x160>)
   1a1e8:	0101      	lsls	r1, r0, #4
   1a1ea:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   1a1ee:	585d      	ldr	r5, [r3, r1]
   1a1f0:	6857      	ldr	r7, [r2, #4]
   1a1f2:	682b      	ldr	r3, [r5, #0]
   1a1f4:	423b      	tst	r3, r7
   1a1f6:	4604      	mov	r4, r0
   1a1f8:	d01c      	beq.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a1fa:	2814      	cmp	r0, #20
   1a1fc:	e9d2 9802 	ldrd	r9, r8, [r2, #8]
   1a200:	d105      	bne.n	1a20e <am_hal_pwrctrl_periph_disable+0x32>
   1a202:	f8df a150 	ldr.w	sl, [pc, #336]	; 1a354 <am_hal_pwrctrl_periph_disable+0x178>
   1a206:	f8da 3fe0 	ldr.w	r3, [sl, #4064]	; 0xfe0
   1a20a:	2bc0      	cmp	r3, #192	; 0xc0
   1a20c:	d037      	beq.n	1a27e <am_hal_pwrctrl_periph_disable+0xa2>
   1a20e:	f7ff fa55 	bl	196bc <am_hal_interrupt_master_disable>
   1a212:	9002      	str	r0, [sp, #8]
   1a214:	682b      	ldr	r3, [r5, #0]
   1a216:	ea23 0707 	bic.w	r7, r3, r7
   1a21a:	602f      	str	r7, [r5, #0]
   1a21c:	9802      	ldr	r0, [sp, #8]
   1a21e:	f7ff fa51 	bl	196c4 <am_hal_interrupt_master_set>
   1a222:	2300      	movs	r3, #0
   1a224:	9300      	str	r3, [sp, #0]
   1a226:	4642      	mov	r2, r8
   1a228:	4643      	mov	r3, r8
   1a22a:	4649      	mov	r1, r9
   1a22c:	2005      	movs	r0, #5
   1a22e:	f7ff fc61 	bl	19af4 <am_hal_delay_us_status_check>
   1a232:	b948      	cbnz	r0, 1a248 <am_hal_pwrctrl_periph_disable+0x6c>
   1a234:	2600      	movs	r6, #0
   1a236:	4630      	mov	r0, r6
   1a238:	b005      	add	sp, #20
   1a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a23e:	2606      	movs	r6, #6
   1a240:	4630      	mov	r0, r6
   1a242:	b005      	add	sp, #20
   1a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a248:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
   1a24c:	d070      	beq.n	1a330 <am_hal_pwrctrl_periph_disable+0x154>
   1a24e:	d90b      	bls.n	1a268 <am_hal_pwrctrl_periph_disable+0x8c>
   1a250:	f5b8 5ff0 	cmp.w	r8, #7680	; 0x1e00
   1a254:	d067      	beq.n	1a326 <am_hal_pwrctrl_periph_disable+0x14a>
   1a256:	f5b8 3fe0 	cmp.w	r8, #114688	; 0x1c000
   1a25a:	d1eb      	bne.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a25c:	682b      	ldr	r3, [r5, #0]
   1a25e:	f413 3fe0 	tst.w	r3, #114688	; 0x1c000
   1a262:	d0e7      	beq.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a264:	682b      	ldr	r3, [r5, #0]
   1a266:	e7e5      	b.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a268:	f1b8 0f1e 	cmp.w	r8, #30
   1a26c:	d056      	beq.n	1a31c <am_hal_pwrctrl_periph_disable+0x140>
   1a26e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a272:	d1df      	bne.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a274:	682b      	ldr	r3, [r5, #0]
   1a276:	b2db      	uxtb	r3, r3
   1a278:	2b00      	cmp	r3, #0
   1a27a:	d0db      	beq.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a27c:	e7f2      	b.n	1a264 <am_hal_pwrctrl_periph_disable+0x88>
   1a27e:	2301      	movs	r3, #1
   1a280:	492f      	ldr	r1, [pc, #188]	; (1a340 <am_hal_pwrctrl_periph_disable+0x164>)
   1a282:	461a      	mov	r2, r3
   1a284:	2064      	movs	r0, #100	; 0x64
   1a286:	f7ff fc09 	bl	19a9c <am_hal_delay_us_status_change>
   1a28a:	4606      	mov	r6, r0
   1a28c:	2800      	cmp	r0, #0
   1a28e:	d1d2      	bne.n	1a236 <am_hal_pwrctrl_periph_disable+0x5a>
   1a290:	2301      	movs	r3, #1
   1a292:	492c      	ldr	r1, [pc, #176]	; (1a344 <am_hal_pwrctrl_periph_disable+0x168>)
   1a294:	461a      	mov	r2, r3
   1a296:	2064      	movs	r0, #100	; 0x64
   1a298:	f7ff fc00 	bl	19a9c <am_hal_delay_us_status_change>
   1a29c:	4606      	mov	r6, r0
   1a29e:	2800      	cmp	r0, #0
   1a2a0:	d1c9      	bne.n	1a236 <am_hal_pwrctrl_periph_disable+0x5a>
   1a2a2:	f8da 3a80 	ldr.w	r3, [sl, #2688]	; 0xa80
   1a2a6:	f043 0301 	orr.w	r3, r3, #1
   1a2aa:	f8ca 3a80 	str.w	r3, [sl, #2688]	; 0xa80
   1a2ae:	4b26      	ldr	r3, [pc, #152]	; (1a348 <am_hal_pwrctrl_periph_disable+0x16c>)
   1a2b0:	f8d3 a000 	ldr.w	sl, [r3]
   1a2b4:	f1ba 0f00 	cmp.w	sl, #0
   1a2b8:	d0a9      	beq.n	1a20e <am_hal_pwrctrl_periph_disable+0x32>
   1a2ba:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1a358 <am_hal_pwrctrl_periph_disable+0x17c>
   1a2be:	f89b 3000 	ldrb.w	r3, [fp]
   1a2c2:	2b00      	cmp	r3, #0
   1a2c4:	d0a3      	beq.n	1a20e <am_hal_pwrctrl_periph_disable+0x32>
   1a2c6:	f7ff f9f9 	bl	196bc <am_hal_interrupt_master_disable>
   1a2ca:	4b20      	ldr	r3, [pc, #128]	; (1a34c <am_hal_pwrctrl_periph_disable+0x170>)
   1a2cc:	f88b 6000 	strb.w	r6, [fp]
   1a2d0:	681e      	ldr	r6, [r3, #0]
   1a2d2:	4a1f      	ldr	r2, [pc, #124]	; (1a350 <am_hal_pwrctrl_periph_disable+0x174>)
   1a2d4:	9003      	str	r0, [sp, #12]
   1a2d6:	eba6 060a 	sub.w	r6, r6, sl
   1a2da:	601e      	str	r6, [r3, #0]
   1a2dc:	6813      	ldr	r3, [r2, #0]
   1a2de:	eba3 030a 	sub.w	r3, r3, sl
   1a2e2:	f8df a078 	ldr.w	sl, [pc, #120]	; 1a35c <am_hal_pwrctrl_periph_disable+0x180>
   1a2e6:	6013      	str	r3, [r2, #0]
   1a2e8:	f8da 2088 	ldr.w	r2, [sl, #136]	; 0x88
   1a2ec:	f383 0306 	usat	r3, #6, r3
   1a2f0:	f363 0205 	bfi	r2, r3, #0, #6
   1a2f4:	4620      	mov	r0, r4
   1a2f6:	f8ca 2088 	str.w	r2, [sl, #136]	; 0x88
   1a2fa:	f7ff fbb7 	bl	19a6c <am_hal_delay_us>
   1a2fe:	f8da 336c 	ldr.w	r3, [sl, #876]	; 0x36c
   1a302:	f386 0606 	usat	r6, #6, r6
   1a306:	f366 5319 	bfi	r3, r6, #20, #6
   1a30a:	f8ca 336c 	str.w	r3, [sl, #876]	; 0x36c
   1a30e:	9803      	ldr	r0, [sp, #12]
   1a310:	f7ff f9d8 	bl	196c4 <am_hal_interrupt_master_set>
   1a314:	4620      	mov	r0, r4
   1a316:	f7ff fba9 	bl	19a6c <am_hal_delay_us>
   1a31a:	e778      	b.n	1a20e <am_hal_pwrctrl_periph_disable+0x32>
   1a31c:	682b      	ldr	r3, [r5, #0]
   1a31e:	f013 0f1e 	tst.w	r3, #30
   1a322:	d087      	beq.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a324:	e79e      	b.n	1a264 <am_hal_pwrctrl_periph_disable+0x88>
   1a326:	682b      	ldr	r3, [r5, #0]
   1a328:	f413 5ff0 	tst.w	r3, #7680	; 0x1e00
   1a32c:	d082      	beq.n	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a32e:	e799      	b.n	1a264 <am_hal_pwrctrl_periph_disable+0x88>
   1a330:	682b      	ldr	r3, [r5, #0]
   1a332:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
   1a336:	f43f af7d 	beq.w	1a234 <am_hal_pwrctrl_periph_disable+0x58>
   1a33a:	e793      	b.n	1a264 <am_hal_pwrctrl_periph_disable+0x88>
   1a33c:	0001a9d0 	.word	0x0001a9d0
   1a340:	400c0a7c 	.word	0x400c0a7c
   1a344:	400c1f10 	.word	0x400c1f10
   1a348:	10000c68 	.word	0x10000c68
   1a34c:	10000c48 	.word	0x10000c48
   1a350:	10000c44 	.word	0x10000c44
   1a354:	400c0000 	.word	0x400c0000
   1a358:	10000c40 	.word	0x10000c40
   1a35c:	40020000 	.word	0x40020000

0001a360 <am_hal_pwrctrl_low_power_init>:
   1a360:	b530      	push	{r4, r5, lr}
   1a362:	4c54      	ldr	r4, [pc, #336]	; (1a4b4 <am_hal_pwrctrl_low_power_init+0x154>)
   1a364:	4a54      	ldr	r2, [pc, #336]	; (1a4b8 <am_hal_pwrctrl_low_power_init+0x158>)
   1a366:	68a3      	ldr	r3, [r4, #8]
   1a368:	4854      	ldr	r0, [pc, #336]	; (1a4bc <am_hal_pwrctrl_low_power_init+0x15c>)
   1a36a:	b083      	sub	sp, #12
   1a36c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
   1a370:	f3c3 5300 	ubfx	r3, r3, #20, #1
   1a374:	7013      	strb	r3, [r2, #0]
   1a376:	f7ff fd45 	bl	19e04 <am_hal_pwrctrl_mcu_memory_config>
   1a37a:	4851      	ldr	r0, [pc, #324]	; (1a4c0 <am_hal_pwrctrl_low_power_init+0x160>)
   1a37c:	f7ff fdf0 	bl	19f60 <am_hal_pwrctrl_sram_config>
   1a380:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1a382:	4850      	ldr	r0, [pc, #320]	; (1a4c4 <am_hal_pwrctrl_low_power_init+0x164>)
   1a384:	2300      	movs	r3, #0
   1a386:	f442 027c 	orr.w	r2, r2, #16515072	; 0xfc0000
   1a38a:	646a      	str	r2, [r5, #68]	; 0x44
   1a38c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   1a390:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1a394:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1a398:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   1a39c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1a3a0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
   1a3a4:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   1a3a8:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   1a3ac:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   1a3b0:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
   1a3b4:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
   1a3b8:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
   1a3bc:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
   1a3c0:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
   1a3c4:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   1a3c8:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
   1a3cc:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
   1a3d0:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
   1a3d4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   1a3d8:	f7ff f8b0 	bl	1953c <am_hal_daxi_config>
   1a3dc:	2064      	movs	r0, #100	; 0x64
   1a3de:	f7ff fb45 	bl	19a6c <am_hal_delay_us>
   1a3e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1a3e4:	4b38      	ldr	r3, [pc, #224]	; (1a4c8 <am_hal_pwrctrl_low_power_init+0x168>)
   1a3e6:	4c39      	ldr	r4, [pc, #228]	; (1a4cc <am_hal_pwrctrl_low_power_init+0x16c>)
   1a3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a3ec:	646a      	str	r2, [r5, #68]	; 0x44
   1a3ee:	f8d3 237c 	ldr.w	r2, [r3, #892]	; 0x37c
   1a3f2:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
   1a3f6:	f442 22d0 	orr.w	r2, r2, #425984	; 0x68000
   1a3fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
   1a3fe:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1a402:	2104      	movs	r1, #4
   1a404:	f361 220f 	bfi	r2, r1, #8, #8
   1a408:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1a40c:	7822      	ldrb	r2, [r4, #0]
   1a40e:	b1da      	cbz	r2, 1a448 <am_hal_pwrctrl_low_power_init+0xe8>
   1a410:	4a2f      	ldr	r2, [pc, #188]	; (1a4d0 <am_hal_pwrctrl_low_power_init+0x170>)
   1a412:	4b30      	ldr	r3, [pc, #192]	; (1a4d4 <am_hal_pwrctrl_low_power_init+0x174>)
   1a414:	6810      	ldr	r0, [r2, #0]
   1a416:	6819      	ldr	r1, [r3, #0]
   1a418:	4b2f      	ldr	r3, [pc, #188]	; (1a4d8 <am_hal_pwrctrl_low_power_init+0x178>)
   1a41a:	4d30      	ldr	r5, [pc, #192]	; (1a4dc <am_hal_pwrctrl_low_power_init+0x17c>)
   1a41c:	4c30      	ldr	r4, [pc, #192]	; (1a4e0 <am_hal_pwrctrl_low_power_init+0x180>)
   1a41e:	6018      	str	r0, [r3, #0]
   1a420:	2201      	movs	r2, #1
   1a422:	2300      	movs	r3, #0
   1a424:	6029      	str	r1, [r5, #0]
   1a426:	6023      	str	r3, [r4, #0]
   1a428:	f44f 6192 	mov.w	r1, #1168	; 0x490
   1a42c:	ab01      	add	r3, sp, #4
   1a42e:	4610      	mov	r0, r2
   1a430:	f000 f9aa 	bl	1a788 <am_hal_mram_info_read>
   1a434:	b928      	cbnz	r0, 1a442 <am_hal_pwrctrl_low_power_init+0xe2>
   1a436:	9b01      	ldr	r3, [sp, #4]
   1a438:	f013 0f06 	tst.w	r3, #6
   1a43c:	d129      	bne.n	1a492 <am_hal_pwrctrl_low_power_init+0x132>
   1a43e:	2303      	movs	r3, #3
   1a440:	6023      	str	r3, [r4, #0]
   1a442:	2000      	movs	r0, #0
   1a444:	b003      	add	sp, #12
   1a446:	bd30      	pop	{r4, r5, pc}
   1a448:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
   1a44c:	4a20      	ldr	r2, [pc, #128]	; (1a4d0 <am_hal_pwrctrl_low_power_init+0x170>)
   1a44e:	4d25      	ldr	r5, [pc, #148]	; (1a4e4 <am_hal_pwrctrl_low_power_init+0x184>)
   1a450:	f3c0 5005 	ubfx	r0, r0, #20, #6
   1a454:	6010      	str	r0, [r2, #0]
   1a456:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
   1a45a:	4a1e      	ldr	r2, [pc, #120]	; (1a4d4 <am_hal_pwrctrl_low_power_init+0x174>)
   1a45c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1a460:	6011      	str	r1, [r2, #0]
   1a462:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
   1a466:	0e92      	lsrs	r2, r2, #26
   1a468:	602a      	str	r2, [r5, #0]
   1a46a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1a46e:	4d1e      	ldr	r5, [pc, #120]	; (1a4e8 <am_hal_pwrctrl_low_power_init+0x188>)
   1a470:	f3c2 4285 	ubfx	r2, r2, #18, #6
   1a474:	602a      	str	r2, [r5, #0]
   1a476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1a478:	4d1c      	ldr	r5, [pc, #112]	; (1a4ec <am_hal_pwrctrl_low_power_init+0x18c>)
   1a47a:	f3c2 12c6 	ubfx	r2, r2, #7, #7
   1a47e:	602a      	str	r2, [r5, #0]
   1a480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a484:	4a1a      	ldr	r2, [pc, #104]	; (1a4f0 <am_hal_pwrctrl_low_power_init+0x190>)
   1a486:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a48a:	6013      	str	r3, [r2, #0]
   1a48c:	2301      	movs	r3, #1
   1a48e:	7023      	strb	r3, [r4, #0]
   1a490:	e7c2      	b.n	1a418 <am_hal_pwrctrl_low_power_init+0xb8>
   1a492:	079a      	lsls	r2, r3, #30
   1a494:	d404      	bmi.n	1a4a0 <am_hal_pwrctrl_low_power_init+0x140>
   1a496:	2306      	movs	r3, #6
   1a498:	2000      	movs	r0, #0
   1a49a:	6023      	str	r3, [r4, #0]
   1a49c:	b003      	add	sp, #12
   1a49e:	bd30      	pop	{r4, r5, pc}
   1a4a0:	075b      	lsls	r3, r3, #29
   1a4a2:	bf54      	ite	pl
   1a4a4:	2309      	movpl	r3, #9
   1a4a6:	6020      	strmi	r0, [r4, #0]
   1a4a8:	f04f 0000 	mov.w	r0, #0
   1a4ac:	bf58      	it	pl
   1a4ae:	6023      	strpl	r3, [r4, #0]
   1a4b0:	b003      	add	sp, #12
   1a4b2:	bd30      	pop	{r4, r5, pc}
   1a4b4:	40021000 	.word	0x40021000
   1a4b8:	10000c40 	.word	0x10000c40
   1a4bc:	0001abf0 	.word	0x0001abf0
   1a4c0:	0001abf8 	.word	0x0001abf8
   1a4c4:	0001a9b8 	.word	0x0001a9b8
   1a4c8:	40020000 	.word	0x40020000
   1a4cc:	10000c41 	.word	0x10000c41
   1a4d0:	10000c4c 	.word	0x10000c4c
   1a4d4:	10000c58 	.word	0x10000c58
   1a4d8:	10000c48 	.word	0x10000c48
   1a4dc:	10000c44 	.word	0x10000c44
   1a4e0:	10000c68 	.word	0x10000c68
   1a4e4:	10000c54 	.word	0x10000c54
   1a4e8:	10000c5c 	.word	0x10000c5c
   1a4ec:	10000c60 	.word	0x10000c60
   1a4f0:	10000c50 	.word	0x10000c50

0001a4f4 <buck_ldo_update_override>:
   1a4f4:	4b06      	ldr	r3, [pc, #24]	; (1a510 <buck_ldo_update_override+0x1c>)
   1a4f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a4f8:	f360 4210 	bfi	r2, r0, #16, #1
   1a4fc:	661a      	str	r2, [r3, #96]	; 0x60
   1a4fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a500:	f360 0200 	bfi	r2, r0, #0, #1
   1a504:	661a      	str	r2, [r3, #96]	; 0x60
   1a506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a508:	f360 1245 	bfi	r2, r0, #5, #1
   1a50c:	661a      	str	r2, [r3, #96]	; 0x60
   1a50e:	4770      	bx	lr
   1a510:	40020000 	.word	0x40020000

0001a514 <am_hal_pwrctrl_control>:
   1a514:	2804      	cmp	r0, #4
   1a516:	f200 812b 	bhi.w	1a770 <am_hal_pwrctrl_control+0x25c>
   1a51a:	e8df f000 	tbb	[pc, r0]
   1a51e:	8c0b      	.short	0x8c0b
   1a520:	a093      	.short	0xa093
   1a522:	03          	.byte	0x03
   1a523:	00          	.byte	0x00
   1a524:	2900      	cmp	r1, #0
   1a526:	f000 8123 	beq.w	1a770 <am_hal_pwrctrl_control+0x25c>
   1a52a:	4b92      	ldr	r3, [pc, #584]	; (1a774 <am_hal_pwrctrl_control+0x260>)
   1a52c:	681b      	ldr	r3, [r3, #0]
   1a52e:	600b      	str	r3, [r1, #0]
   1a530:	2006      	movs	r0, #6
   1a532:	4770      	bx	lr
   1a534:	b510      	push	{r4, lr}
   1a536:	4c90      	ldr	r4, [pc, #576]	; (1a778 <am_hal_pwrctrl_control+0x264>)
   1a538:	6822      	ldr	r2, [r4, #0]
   1a53a:	1c51      	adds	r1, r2, #1
   1a53c:	f000 8093 	beq.w	1a666 <am_hal_pwrctrl_control+0x152>
   1a540:	2a02      	cmp	r2, #2
   1a542:	f240 809e 	bls.w	1a682 <am_hal_pwrctrl_control+0x16e>
   1a546:	4b8d      	ldr	r3, [pc, #564]	; (1a77c <am_hal_pwrctrl_control+0x268>)
   1a548:	4c8d      	ldr	r4, [pc, #564]	; (1a780 <am_hal_pwrctrl_control+0x26c>)
   1a54a:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   1a54e:	200a      	movs	r0, #10
   1a550:	f360 619d 	bfi	r1, r0, #26, #4
   1a554:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   1a558:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   1a55c:	f360 3150 	bfi	r1, r0, #13, #4
   1a560:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   1a564:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   1a568:	f041 7170 	orr.w	r1, r1, #62914560	; 0x3c00000
   1a56c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   1a570:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   1a574:	f441 51f0 	orr.w	r1, r1, #7680	; 0x1e00
   1a578:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   1a57c:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
   1a580:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1a584:	f8c3 1380 	str.w	r1, [r3, #896]	; 0x380
   1a588:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
   1a58c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
   1a590:	f8c3 1380 	str.w	r1, [r3, #896]	; 0x380
   1a594:	f8d3 1370 	ldr.w	r1, [r3, #880]	; 0x370
   1a598:	f3c1 5105 	ubfx	r1, r1, #20, #6
   1a59c:	6021      	str	r1, [r4, #0]
   1a59e:	f8d3 1370 	ldr.w	r1, [r3, #880]	; 0x370
   1a5a2:	2007      	movs	r0, #7
   1a5a4:	f36f 5119 	bfc	r1, #20, #6
   1a5a8:	2a05      	cmp	r2, #5
   1a5aa:	f8c3 1370 	str.w	r1, [r3, #880]	; 0x370
   1a5ae:	f8c3 033c 	str.w	r0, [r3, #828]	; 0x33c
   1a5b2:	d908      	bls.n	1a5c6 <am_hal_pwrctrl_control+0xb2>
   1a5b4:	220f      	movs	r2, #15
   1a5b6:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
   1a5ba:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
   1a5be:	f022 0218 	bic.w	r2, r2, #24
   1a5c2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
   1a5c6:	496f      	ldr	r1, [pc, #444]	; (1a784 <am_hal_pwrctrl_control+0x270>)
   1a5c8:	4b6c      	ldr	r3, [pc, #432]	; (1a77c <am_hal_pwrctrl_control+0x268>)
   1a5ca:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   1a5ce:	f042 0201 	orr.w	r2, r2, #1
   1a5d2:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
   1a5d6:	f8d3 2378 	ldr.w	r2, [r3, #888]	; 0x378
   1a5da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1a5de:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
   1a5e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a5e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1a5e8:	661a      	str	r2, [r3, #96]	; 0x60
   1a5ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a5ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1a5f0:	661a      	str	r2, [r3, #96]	; 0x60
   1a5f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a5f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1a5f8:	661a      	str	r2, [r3, #96]	; 0x60
   1a5fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a5fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   1a600:	661a      	str	r2, [r3, #96]	; 0x60
   1a602:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a604:	f36f 1204 	bfc	r2, #4, #1
   1a608:	661a      	str	r2, [r3, #96]	; 0x60
   1a60a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a60c:	f042 020e 	orr.w	r2, r2, #14
   1a610:	661a      	str	r2, [r3, #96]	; 0x60
   1a612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a614:	f042 0201 	orr.w	r2, r2, #1
   1a618:	661a      	str	r2, [r3, #96]	; 0x60
   1a61a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a61c:	f36f 2249 	bfc	r2, #9, #1
   1a620:	661a      	str	r2, [r3, #96]	; 0x60
   1a622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a624:	f442 72e0 	orr.w	r2, r2, #448	; 0x1c0
   1a628:	661a      	str	r2, [r3, #96]	; 0x60
   1a62a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a62c:	f042 0220 	orr.w	r2, r2, #32
   1a630:	661a      	str	r2, [r3, #96]	; 0x60
   1a632:	2000      	movs	r0, #0
   1a634:	bd10      	pop	{r4, pc}
   1a636:	4b53      	ldr	r3, [pc, #332]	; (1a784 <am_hal_pwrctrl_control+0x270>)
   1a638:	6898      	ldr	r0, [r3, #8]
   1a63a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
   1a63e:	f040 8094 	bne.w	1a76a <am_hal_pwrctrl_control+0x256>
   1a642:	4770      	bx	lr
   1a644:	4b4d      	ldr	r3, [pc, #308]	; (1a77c <am_hal_pwrctrl_control+0x268>)
   1a646:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1a64a:	2020      	movs	r0, #32
   1a64c:	f360 0287 	bfi	r2, r0, #2, #6
   1a650:	2101      	movs	r1, #1
   1a652:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1a656:	2000      	movs	r0, #0
   1a658:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1a65c:	4770      	bx	lr
   1a65e:	4b49      	ldr	r3, [pc, #292]	; (1a784 <am_hal_pwrctrl_control+0x270>)
   1a660:	2000      	movs	r0, #0
   1a662:	6058      	str	r0, [r3, #4]
   1a664:	4770      	bx	lr
   1a666:	2201      	movs	r2, #1
   1a668:	4623      	mov	r3, r4
   1a66a:	f240 41c4 	movw	r1, #1220	; 0x4c4
   1a66e:	4610      	mov	r0, r2
   1a670:	f000 f88a 	bl	1a788 <am_hal_mram_info_read>
   1a674:	b918      	cbnz	r0, 1a67e <am_hal_pwrctrl_control+0x16a>
   1a676:	6822      	ldr	r2, [r4, #0]
   1a678:	1c53      	adds	r3, r2, #1
   1a67a:	f47f af61 	bne.w	1a540 <am_hal_pwrctrl_control+0x2c>
   1a67e:	2300      	movs	r3, #0
   1a680:	6023      	str	r3, [r4, #0]
   1a682:	4b3e      	ldr	r3, [pc, #248]	; (1a77c <am_hal_pwrctrl_control+0x268>)
   1a684:	483e      	ldr	r0, [pc, #248]	; (1a780 <am_hal_pwrctrl_control+0x26c>)
   1a686:	f8d3 1378 	ldr.w	r1, [r3, #888]	; 0x378
   1a68a:	f36f 611c 	bfc	r1, #24, #5
   1a68e:	f8c3 1378 	str.w	r1, [r3, #888]	; 0x378
   1a692:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1a696:	f36f 4196 	bfc	r1, #18, #5
   1a69a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1a69e:	f8d3 1344 	ldr.w	r1, [r3, #836]	; 0x344
   1a6a2:	220a      	movs	r2, #10
   1a6a4:	f362 611c 	bfi	r1, r2, #24, #5
   1a6a8:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
   1a6ac:	f8d3 1344 	ldr.w	r1, [r3, #836]	; 0x344
   1a6b0:	f362 21ce 	bfi	r1, r2, #11, #4
   1a6b4:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
   1a6b8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1a6bc:	240f      	movs	r4, #15
   1a6be:	f364 210c 	bfi	r1, r4, #8, #5
   1a6c2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1a6c6:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   1a6ca:	f441 11f0 	orr.w	r1, r1, #1966080	; 0x1e0000
   1a6ce:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   1a6d2:	f8d3 1360 	ldr.w	r1, [r3, #864]	; 0x360
   1a6d6:	f364 519a 	bfi	r1, r4, #22, #5
   1a6da:	f8c3 1360 	str.w	r1, [r3, #864]	; 0x360
   1a6de:	f8d3 1360 	ldr.w	r1, [r3, #864]	; 0x360
   1a6e2:	f441 11f0 	orr.w	r1, r1, #1966080	; 0x1e0000
   1a6e6:	f8c3 1360 	str.w	r1, [r3, #864]	; 0x360
   1a6ea:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   1a6ee:	f362 619d 	bfi	r1, r2, #26, #4
   1a6f2:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   1a6f6:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   1a6fa:	f362 3150 	bfi	r1, r2, #13, #4
   1a6fe:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   1a702:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   1a706:	f042 7270 	orr.w	r2, r2, #62914560	; 0x3c00000
   1a70a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   1a70e:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   1a712:	f442 52f0 	orr.w	r2, r2, #7680	; 0x1e00
   1a716:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   1a71a:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   1a71e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1a722:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   1a726:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   1a72a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   1a72e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   1a732:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   1a736:	f3c2 5205 	ubfx	r2, r2, #20, #6
   1a73a:	6002      	str	r2, [r0, #0]
   1a73c:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   1a740:	2407      	movs	r4, #7
   1a742:	f36f 5219 	bfc	r2, #20, #6
   1a746:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
   1a74a:	f8c3 433c 	str.w	r4, [r3, #828]	; 0x33c
   1a74e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   1a752:	f36f 5299 	bfc	r2, #22, #4
   1a756:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
   1a75a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   1a75e:	2101      	movs	r1, #1
   1a760:	f361 128a 	bfi	r2, r1, #6, #5
   1a764:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
   1a768:	e72d      	b.n	1a5c6 <am_hal_pwrctrl_control+0xb2>
   1a76a:	2014      	movs	r0, #20
   1a76c:	f7ff bd36 	b.w	1a1dc <am_hal_pwrctrl_periph_disable>
   1a770:	2006      	movs	r0, #6
   1a772:	4770      	bx	lr
   1a774:	10000c64 	.word	0x10000c64
   1a778:	10000014 	.word	0x10000014
   1a77c:	40020000 	.word	0x40020000
   1a780:	10000018 	.word	0x10000018
   1a784:	40021000 	.word	0x40021000

0001a788 <am_hal_mram_info_read>:
   1a788:	b9c0      	cbnz	r0, 1a7bc <am_hal_mram_info_read+0x34>
   1a78a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a78e:	d228      	bcs.n	1a7e2 <am_hal_mram_info_read+0x5a>
   1a790:	1888      	adds	r0, r1, r2
   1a792:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a796:	d824      	bhi.n	1a7e2 <am_hal_mram_info_read+0x5a>
   1a798:	f101 5184 	add.w	r1, r1, #276824064	; 0x10800000
   1a79c:	0089      	lsls	r1, r1, #2
   1a79e:	b312      	cbz	r2, 1a7e6 <am_hal_mram_info_read+0x5e>
   1a7a0:	b410      	push	{r4}
   1a7a2:	2000      	movs	r0, #0
   1a7a4:	3001      	adds	r0, #1
   1a7a6:	680c      	ldr	r4, [r1, #0]
   1a7a8:	f843 4b04 	str.w	r4, [r3], #4
   1a7ac:	4282      	cmp	r2, r0
   1a7ae:	f101 0104 	add.w	r1, r1, #4
   1a7b2:	d1f7      	bne.n	1a7a4 <am_hal_mram_info_read+0x1c>
   1a7b4:	2000      	movs	r0, #0
   1a7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a7ba:	4770      	bx	lr
   1a7bc:	2801      	cmp	r0, #1
   1a7be:	d10e      	bne.n	1a7de <am_hal_mram_info_read+0x56>
   1a7c0:	f5a1 6090 	sub.w	r0, r1, #1152	; 0x480
   1a7c4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1a7c8:	d20b      	bcs.n	1a7e2 <am_hal_mram_info_read+0x5a>
   1a7ca:	1888      	adds	r0, r1, r2
   1a7cc:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
   1a7d0:	d807      	bhi.n	1a7e2 <am_hal_mram_info_read+0x5a>
   1a7d2:	f101 5184 	add.w	r1, r1, #276824064	; 0x10800000
   1a7d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
   1a7da:	0089      	lsls	r1, r1, #2
   1a7dc:	e7df      	b.n	1a79e <am_hal_mram_info_read+0x16>
   1a7de:	2001      	movs	r0, #1
   1a7e0:	4770      	bx	lr
   1a7e2:	2002      	movs	r0, #2
   1a7e4:	4770      	bx	lr
   1a7e6:	2000      	movs	r0, #0
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop
   1a7ec:	732f2e2e 	.word	0x732f2e2e
   1a7f0:	702f6372 	.word	0x702f6372
   1a7f4:	70697265 	.word	0x70697265
   1a7f8:	61726568 	.word	0x61726568
   1a7fc:	732f736c 	.word	0x732f736c
   1a800:	6c2f6372 	.word	0x6c2f6372
   1a804:	6967676f 	.word	0x6967676f
   1a808:	632e676e 	.word	0x632e676e
   1a80c:	00000000 	.word	0x00000000
   1a810:	2d2d2d0a 	.word	0x2d2d2d0a
   1a814:	2d2d2d2d 	.word	0x2d2d2d2d
   1a818:	2d2d2d2d 	.word	0x2d2d2d2d
   1a81c:	2d2d2d2d 	.word	0x2d2d2d2d
   1a820:	2d2d2d2d 	.word	0x2d2d2d2d
   1a824:	2d2d2d2d 	.word	0x2d2d2d2d
   1a828:	2d2d2d2d 	.word	0x2d2d2d2d
   1a82c:	2d2d2d2d 	.word	0x2d2d2d2d
   1a830:	2d2d2d2d 	.word	0x2d2d2d2d
   1a834:	2d2d2d2d 	.word	0x2d2d2d2d
   1a838:	00000a2d 	.word	0x00000a2d
   1a83c:	65736552 	.word	0x65736552
   1a840:	65522074 	.word	0x65522074
   1a844:	6e6f7361 	.word	0x6e6f7361
   1a848:	00203a73 	.word	0x00203a73
   1a84c:	65747845 	.word	0x65747845
   1a850:	6c616e72 	.word	0x6c616e72
   1a854:	73655220 	.word	0x73655220
   1a858:	202c7465 	.word	0x202c7465
   1a85c:	00000000 	.word	0x00000000
   1a860:	50205748 	.word	0x50205748
   1a864:	7265776f 	.word	0x7265776f
   1a868:	206e4f2d 	.word	0x206e4f2d
   1a86c:	65736552 	.word	0x65736552
   1a870:	00202c74 	.word	0x00202c74
   1a874:	776f7242 	.word	0x776f7242
   1a878:	754f2d6e 	.word	0x754f2d6e
   1a87c:	65522074 	.word	0x65522074
   1a880:	2c746573 	.word	0x2c746573
   1a884:	00000020 	.word	0x00000020
   1a888:	50205753 	.word	0x50205753
   1a88c:	7265776f 	.word	0x7265776f
   1a890:	206e4f2d 	.word	0x206e4f2d
   1a894:	65736552 	.word	0x65736552
   1a898:	00202c74 	.word	0x00202c74
   1a89c:	50205753 	.word	0x50205753
   1a8a0:	7265776f 	.word	0x7265776f
   1a8a4:	206e4f2d 	.word	0x206e4f2d
   1a8a8:	74696e49 	.word	0x74696e49
   1a8ac:	696c6169 	.word	0x696c6169
   1a8b0:	6974617a 	.word	0x6974617a
   1a8b4:	202c6e6f 	.word	0x202c6e6f
   1a8b8:	00000000 	.word	0x00000000
   1a8bc:	75626544 	.word	0x75626544
   1a8c0:	72656767 	.word	0x72656767
   1a8c4:	73655220 	.word	0x73655220
   1a8c8:	202c7465 	.word	0x202c7465
   1a8cc:	00000000 	.word	0x00000000
   1a8d0:	63746157 	.word	0x63746157
   1a8d4:	6f442068 	.word	0x6f442068
   1a8d8:	69542067 	.word	0x69542067
   1a8dc:	2072656d 	.word	0x2072656d
   1a8e0:	65736552 	.word	0x65736552
   1a8e4:	00202c74 	.word	0x00202c74
   1a8e8:	65726e55 	.word	0x65726e55
   1a8ec:	616c7567 	.word	0x616c7567
   1a8f0:	20646574 	.word	0x20646574
   1a8f4:	70707553 	.word	0x70707553
   1a8f8:	4220796c 	.word	0x4220796c
   1a8fc:	6e776f72 	.word	0x6e776f72
   1a900:	2c74756f 	.word	0x2c74756f
   1a904:	00000020 	.word	0x00000020
   1a908:	65726f43 	.word	0x65726f43
   1a90c:	67655220 	.word	0x67655220
   1a910:	74616c75 	.word	0x74616c75
   1a914:	4220726f 	.word	0x4220726f
   1a918:	6e776f72 	.word	0x6e776f72
   1a91c:	2c74756f 	.word	0x2c74756f
   1a920:	00000020 	.word	0x00000020
   1a924:	6f6d654d 	.word	0x6f6d654d
   1a928:	52207972 	.word	0x52207972
   1a92c:	6c756765 	.word	0x6c756765
   1a930:	726f7461 	.word	0x726f7461
   1a934:	6f724220 	.word	0x6f724220
   1a938:	756f6e77 	.word	0x756f6e77
   1a93c:	00202c74 	.word	0x00202c74
   1a940:	68676948 	.word	0x68676948
   1a944:	776f502d 	.word	0x776f502d
   1a948:	4d207265 	.word	0x4d207265
   1a94c:	726f6d65 	.word	0x726f6d65
   1a950:	65522079 	.word	0x65522079
   1a954:	616c7567 	.word	0x616c7567
   1a958:	20726f74 	.word	0x20726f74
   1a95c:	776f7242 	.word	0x776f7242
   1a960:	74756f6e 	.word	0x74756f6e
   1a964:	0000202c 	.word	0x0000202c
   1a968:	2d776f4c 	.word	0x2d776f4c
   1a96c:	65776f50 	.word	0x65776f50
   1a970:	6f432072 	.word	0x6f432072
   1a974:	52206572 	.word	0x52206572
   1a978:	6c756765 	.word	0x6c756765
   1a97c:	726f7461 	.word	0x726f7461
   1a980:	6f724220 	.word	0x6f724220
   1a984:	756f6e77 	.word	0x756f6e77
   1a988:	00202c74 	.word	0x00202c74
   1a98c:	0000000a 	.word	0x0000000a
   1a990:	07070000 	.word	0x07070000
   1a994:	00000001 	.word	0x00000001
   1a998:	6e696f47 	.word	0x6e696f47
   1a99c:	6f742067 	.word	0x6f742067
   1a9a0:	656c7320 	.word	0x656c7320
   1a9a4:	2e2e7065 	.word	0x2e2e7065
   1a9a8:	00000a2e 	.word	0x00000a2e
   1a9ac:	656b6f57 	.word	0x656b6f57
   1a9b0:	21707520 	.word	0x21707520
   1a9b4:	0000000a 	.word	0x0000000a

0001a9b8 <am_hal_daxi_defaults>:
   1a9b8:	0f020100 00000001                       ........

0001a9c0 <g_ui32DSpintbl>:
   1a9c0:	8fc007e0 e3fbffff 01ffffff 00000000     ................

0001a9d0 <am_hal_pwrctrl_peripheral_control>:
   1a9d0:	40021004 00000001 40021008 00000001     ...@.......@....
   1a9e0:	40021004 00000002 40021008 0000001e     ...@.......@....
   1a9f0:	40021004 00000004 40021008 0000001e     ...@.......@....
   1aa00:	40021004 00000008 40021008 0000001e     ...@.......@....
   1aa10:	40021004 00000010 40021008 0000001e     ...@.......@....
   1aa20:	40021004 00000020 40021008 000001e0     ...@ ......@....
   1aa30:	40021004 00000040 40021008 000001e0     ...@@......@....
   1aa40:	40021004 00000080 40021008 000001e0     ...@.......@....
   1aa50:	40021004 00000100 40021008 000001e0     ...@.......@....
   1aa60:	40021004 00000200 40021008 00001e00     ...@.......@....
   1aa70:	40021004 00000400 40021008 00001e00     ...@.......@....
   1aa80:	40021004 00000800 40021008 00001e00     ...@.......@....
   1aa90:	40021004 00001000 40021008 00001e00     ...@.......@....
   1aaa0:	40021004 00002000 40021008 00002000     ...@. .....@. ..
   1aab0:	40021004 00004000 40021008 0001c000     ...@.@.....@....
   1aac0:	40021004 00008000 40021008 0001c000     ...@.......@....
   1aad0:	40021004 00010000 40021008 0001c000     ...@.......@....
   1aae0:	40021004 00020000 40021008 00020000     ...@.......@....
   1aaf0:	40021004 00040000 40021008 00040000     ...@.......@....
   1ab00:	40021004 00080000 40021008 00080000     ...@.......@....
   1ab10:	40021004 00100000 40021008 00100000     ...@.......@....
   1ab20:	40021004 00200000 40021008 00200000     ...@.. ....@.. .
   1ab30:	40021004 00400000 40021008 00400000     ...@..@....@..@.
   1ab40:	40021004 00800000 40021008 00800000     ...@.......@....
   1ab50:	40021004 01000000 40021008 01000000     ...@.......@....
   1ab60:	4002100c 00000001 40021010 000000ff     ...@.......@....
   1ab70:	4002100c 00000002 40021010 000000ff     ...@.......@....
   1ab80:	4002100c 00000004 40021010 000000ff     ...@.......@....
   1ab90:	4002100c 00000008 40021010 000000ff     ...@.......@....
   1aba0:	4002100c 00000010 40021010 000000ff     ...@.......@....
   1abb0:	4002100c 00000020 40021010 000000ff     ...@ ......@....
   1abc0:	4002100c 00000040 40021010 000000ff     ...@@......@....
   1abd0:	4002100c 00000080 40021010 000000ff     ...@.......@....
   1abe0:	4002100c 00000400 40021010 00000400     ...@.......@....

0001abf0 <g_DefaultMcuMemCfg>:
   1abf0:	07070102 00000001                       ........

0001abf8 <g_DefaultSRAMCfg>:
   1abf8:	00000003 00000300                       ........

0001ac00 <g_am_hal_bootrom_helper>:
   1ac00:	0800004d 08000051 08000055 08000059     M...Q...U...Y...
   1ac10:	0800006d 08000075 08000079 08000081     m...u...y.......
   1ac20:	08000099 0800009d                       ........
